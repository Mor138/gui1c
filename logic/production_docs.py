# production_docs.py ‚Ä¢ v0.4
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import itertools, uuid, datetime
from collections import defaultdict
from copy import deepcopy
from typing import Dict, Any, List, Tuple
from uuid import uuid4

from catalogs import NOMENCLATURE, metal_by_hallmark  # –º–µ—Ç–æ–¥ 3d / rubber
from core.logger import logger
import config

from .state import ORDERS_POOL, WAX_JOBS_POOL  # —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

METHOD_LABEL = {"3d": "3D –ø–µ—á–∞—Ç—å", "rubber": "–†–µ–∑–∏–Ω–∞"}

# —Å—Ç–∞—Ç—É—Å—ã –Ω–∞—Ä—è–¥–æ–≤
JOB_STATES = [
    "created",   # —Å–æ–∑–¥–∞–Ω
    "given",     # –≤—ã–¥–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    "done",      # –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ —Å–¥–∞–Ω
    "accepted",  # –ø—Ä–∏–Ω—è—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
    "tree_ready" # —ë–ª–∫–∞ —Å–æ–±—Ä–∞–Ω–∞
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  helpers  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _barcode(p):     return f"{p}-{uuid.uuid4().hex[:8].upper()}"
def new_order_code(): return _barcode("ORD")
def new_batch_code(): return _barcode("BTH")
def new_item_code():  return _barcode("ITM")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1. —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º qty –≤ –µ–¥–∏–Ω–∏—Ü—ã  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def expand_items(order_json: Dict[str, Any]) -> List[Dict[str, Any]]:
    lst=[]
    for row in order_json["rows"]:
        unit_w = row["weight"]/row["qty"] if row["qty"] else 0
        for _ in range(row["qty"]):
            it = row.copy()  # avoid deepcopy of possible COM objects
            it["item_barcode"] = new_item_code()
            it["weight"] = unit_w
            lst.append(it)
    return lst

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  2. –ø–∞—Ä—Ç–∏–∏ (–º–µ—Ç–∞–ª–ª-–ø—Ä–æ–±–∞-—Ü–≤–µ—Ç)  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
GROUP_KEYS_WAX_CAST = ("metal","hallmark","color")

def group_by_keys(items: list[dict], keys: tuple[str]):
    batches, mapping = [], defaultdict(list)
    items.sort(key=lambda r: tuple(r[k] for k in keys))
    for key, grp in itertools.groupby(items, key=lambda r: tuple(r[k] for k in keys)):
        grp=list(grp); code=new_batch_code()
        batches.append(dict(
            batch_barcode = code,
            **{k:v for k,v in zip(keys,key)},
            qty     = len(grp),
            total_w = round(sum(i["weight"] for i in grp), config.WEIGHT_DECIMALS)
        ))
        mapping[code] = [i["item_barcode"] for i in grp]
    return batches, mapping

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  3. –º–µ—Ç–æ–¥ (3d / rubber) –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _wax_method(article: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.

    –ï—Å–ª–∏ –≤ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±—É–∫–≤–∞ ¬´–¥¬ª/"d", —Å—á–∏—Ç–∞–µ–º –µ–≥–æ 3D –º–æ–¥–µ–ª—å—é.
    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ "rubber".
    """
    art = str(article).lower()
    if "–¥" in art or "d" in art:
        return "3d"
    return "rubber"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  4. —Ñ–æ—Ä–º–∏—Ä—É–µ–º 2 –æ–ø–µ—Ä–∞—Ü–∏–∏: cast & tree  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
OPS = {"cast":"–û—Ç–ª–∏–≤ –≤–æ—Å–∫–æ–≤—ã—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫",
       "tree":"–°–±–æ—Ä–∫–∞ –≤–æ—Å–∫–æ–≤—ã—Ö —ë–ª–æ–∫"}

def build_wax_jobs(order: dict, batches: list[dict]) -> list[dict]:
    result = []
    from uuid import uuid4
    grouped = defaultdict(list)

    # –ü—Ä–∏–≤—è–∑–∫–∞ —Å—Ç—Ä–æ–∫ –∫ batch_code –ø–æ —Ü–≤–µ—Ç—É/–ø—Ä–æ–±–µ/–º–µ—Ç–∞–ª–ª—É
    batch_map = {}
    for b in batches:
        key = (b["metal"], b["hallmark"], b["color"])
        batch_map[key] = b["batch_barcode"]

    for row in order["rows"]:
        method = _wax_method(row["article"])
        key = (row["metal"], row["hallmark"], row["color"])
        batch_code = batch_map.get(key)
        row["batch_code"] = batch_code  # ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
        grouped[method].append(row)

    for method, rows in grouped.items():
        wax_code = f"WX-{uuid4().hex[:8].upper()}"
        for row in rows:
            result.append({
                "wax_job": wax_code,
                "method": method,
                "articles": row["article"],
                "qty": row["qty"],
                "weight": row["weight"],
                "batch_code": row["batch_code"],
                "metal": row["metal"],
                "hallmark": row["hallmark"],
                "color": row["color"],
                "operation": "–û—Ç–ª–∏–≤ –≤–æ—Å–∫–æ–≤—ã—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫" if method == "3d" else "–í–æ—Å–∫–æ–≤–∫–∞ –∏–∑ –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã",
                "status": "created"
            })

    return result

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  5. –≥–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def process_new_order(order_json: Dict[str,Any]) -> Dict[str,Any]:
    order_code = order_json.get("number", new_order_code())  # fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ 1–°

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –≤ ORDERS_POOL ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
    for existing in ORDERS_POOL:
        if existing["order"].get("number") == order_code:
            logger.warning(
                f"[process_new_order] –ó–∞–∫–∞–∑ ‚Ññ{order_code} —É–∂–µ –≤ ORDERS_POOL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            )
            return existing  # –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å

    items      = expand_items(order_json)
    batches, mapping = group_by_keys(items, GROUP_KEYS_WAX_CAST)
    wax_jobs   = build_wax_jobs(order_json, batches)
    WAX_JOBS_POOL.extend(wax_jobs)

    record = dict(order=order_json, docs=dict(
        order_code=order_code,
        items=items,
        batches=batches,
        mapping=mapping,
        wax_jobs=wax_jobs))
    
    ORDERS_POOL.append(record)
    return record

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  service helpers  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _find_job(code: str) -> dict | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Ä—è–¥–∞ –ø–æ –µ–≥–æ –∫–æ–¥—É."""
    return next((j for j in WAX_JOBS_POOL if j.get("wax_job") == code), None)

def get_wax_job(job_code: str) -> dict | None:
    """–ü—É–±–ª–∏—á–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Ä—è–¥–∞."""
    return _find_job(job_code)

def update_wax_job(job_code: str, updates: Dict[str, Any]) -> dict | None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è –Ω–∞—Ä—è–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ."""
    job = _find_job(job_code)
    if not job:
        return None
    job.update(updates)
    return job


def log_event(job_code: str, stage: str, user: str | None = None, extra: Dict[str, Any] | None = None) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∂—É—Ä–Ω–∞–ª –Ω–∞—Ä—è–¥–∞."""
    job = _find_job(job_code)
    if not job:
        return
    if "signed_log" not in job or not isinstance(job["signed_log"], list):
        job["signed_log"] = []
    rec = dict(stage=stage, user=user,
               time=datetime.datetime.now().isoformat(timespec="seconds"))
    if extra:
        rec.update(extra)
    job["signed_log"].append(rec)



def load_wax_job_from_1c(job_num: str) -> list[dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Ä—è–¥ –∏–∑ 1–° –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ç–∞–ª–ª—É, –ø—Ä–æ–±–µ –∏ —Ü–≤–µ—Ç—É."""
    rows = config.BRIDGE.get_wax_job_lines(job_num)
    if not rows:
        return []

    grouped: dict[tuple[str, str, str], dict[str, float]] = defaultdict(lambda: dict(qty=0.0, weight=0.0))
    for r in rows:
        hallmark = str(r.get("sample", ""))
        color = str(r.get("color", ""))
        metal = metal_by_hallmark(hallmark) or ""
        key = (metal, hallmark, color)
        grouped[key]["qty"] += r.get("qty", 0)
        grouped[key]["weight"] += r.get("weight", 0)

    result = []
    for (metal, hallmark, color), vals in grouped.items():
        result.append(
            dict(
                wax_job=job_num,
                metal=metal,
                hallmark=hallmark,
                color=color,
                qty=int(vals["qty"]),
                weight=round(vals["weight"], config.WEIGHT_DECIMALS),
            )
        )
    return result



def form_wax_trees(jobs: list[dict]) -> list[dict]:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –Ω–∞—Ä—è–¥—ã –≤ —ë–ª–∫–∏ –ø–æ –º–µ—Ç–∞–ª–ª—É, –ø—Ä–æ–±–µ –∏ —Ü–≤–µ—Ç—É."""
    from logic.state import TREES_POOL
    grouped: dict[tuple[str, str, str], list[dict]] = defaultdict(list)
    for j in jobs:
        key = (j.get("metal"), j.get("hallmark"), j.get("color"))
        grouped[key].append(j)

    trees = []
    for (metal, hallmark, color), rows in grouped.items():
        code = f"TR-{uuid4().hex[:6].upper()}"
        qty = sum(r.get("qty", 0) for r in rows)
        weight = round(sum(r.get("weight", 0) for r in rows), config.WEIGHT_DECIMALS)
        tree = dict(
            tree_code=code,
            metal=metal,
            hallmark=hallmark,
            color=color,
            qty=qty,
            weight=weight,
            jobs=[r.get("wax_job") for r in rows],
        )
        trees.append(tree)
        TREES_POOL.append(tree)

    return trees

