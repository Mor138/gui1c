"""
Runtime form builder (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ–æ—Ä–º) –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ JewelryMES.

–ü–æ–∑–≤–æ–ª—è–µ—Ç:
- –∏–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ —Å—á–∏—Ç—ã–≤–∞—Ç—å dataclass‚Äë–º–æ–¥–µ–ª–∏ (–∏–ª–∏ SQLAlchemy/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ) –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π;
- –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º (double‚Äëclick) –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É‚Äë–ø—Ä–µ–≤—å—é;
- –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ (–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ QListWidgetItem ‚Äì –æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ TODO);
- —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤ –ª—ë–≥–∫–æ–º JSON‚Äë—Ñ–æ—Ä–º–∞—Ç–µ *.jfrm;
- –≤ —Ä–∞–Ω—Ç–∞–π–º–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ñ–æ—Ä–º—É –∏ –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π QWidget –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
- –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ¬´–Ω–∞ –≥–æ—Ä—è—á—É—é¬ª —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é open_form_builder(model_cls).

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: PySide6 (pip install PySide6)
"""

from __future__ import annotations

import dataclasses
import inspect
import json
from typing import Any, Dict, List

from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QFileDialog,
    QFormLayout,
    QLabel,
    QListWidget,
    QListWidgetItem,
    QLineEdit,
    QMainWindow,
    QMessageBox,
    QPushButton,
    QSplitter,
    QToolBar,
    QWidget,
)


class FieldMeta:
    """–ö—Ä–æ—à–µ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç‚Äë–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –∞—Ç—Ä–∏–±—É—Ç–æ–º –º–æ–¥–µ–ª–∏."""

    def __init__(self, name: str, ftype: str, title: str | None = None):
        self.name = name
        self.ftype = ftype
        self.title = title or name.capitalize()

    @classmethod
    def from_dataclass(cls, field: dataclasses.Field):  # type: ignore[arg-type]
        return cls(
            field.name,
            getattr(field.type, "__name__", str(field.type)),
            field.metadata.get("title") if hasattr(field, "metadata") else None,
        )

    def to_dict(self) -> Dict[str, Any]:
        return {"name": self.name, "ftype": self.ftype, "title": self.title}


class FormBlueprint(dict):
    """Serialisable –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã (–≤–µ—Ä—Å–∏—è 1)."""

    version = 1

    def to_json(self, path: str):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(self, f, ensure_ascii=False, indent=2)

    @classmethod
    def from_json(cls, path: str) -> "FormBlueprint":
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        return cls(**data)


class FormBuilderWindow(QMainWindow):
    def __init__(self, model_cls):
        super().__init__()
        self.setWindowTitle(f"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ–æ—Ä–º—ã ‚Äî {model_cls.__name__}")
        self.model_cls = model_cls
        self.blueprint: FormBlueprint = FormBlueprint(fields=[])
        self._build_ui()

    # ----------------------------- UI helpers ----------------------------- #
    def _build_ui(self):
        splitter = QSplitter(Qt.Horizontal, self)
        self.setCentralWidget(splitter)

        # --- –ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π --- #
        self.list_fields = QListWidget()
        for fld in dataclasses.fields(self.model_cls):  # type: ignore[arg-type]
            meta = FieldMeta.from_dataclass(fld)
            item = QListWidgetItem(f"{meta.name} ({meta.ftype})")
            item.setData(Qt.UserRole, meta)
            self.list_fields.addItem(item)
        splitter.addWidget(self.list_fields)

        # --- –ü—Ä–µ–≤—å—é —Ñ–æ—Ä–º–æ—á–∫–∏ --- #
        preview_container = QWidget()
        self.preview_layout = QFormLayout(preview_container)
        splitter.addWidget(preview_container)

        # --- –°–∏–≥–Ω–∞–ª—ã --- #
        self.list_fields.itemDoubleClicked.connect(self._add_field)  # type: ignore[arg-type]

        # --- Toolbar --- #
        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.clicked.connect(self._save)
        validate_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
        validate_btn.clicked.connect(self._validate)
        self.addToolBar(Qt.TopToolBarArea, self._build_toolbar([save_btn, validate_btn]))

    def _build_toolbar(self, widgets: List[QPushButton]) -> QToolBar:  # noqa: D401
        bar = QToolBar("Tools", self)
        for w in widgets:
            bar.addWidget(w)
        return bar

    # ----------------------------- callbacks ----------------------------- #
    def _add_field(self, item: QListWidgetItem):
        meta: FieldMeta = item.data(Qt.UserRole)
        label = QLabel(meta.title)
        editor: QWidget
        if meta.ftype in {"str", "uuid", "date", "datetime", "Decimal"}:
            editor = QLineEdit()
        else:
            editor = QLabel(f"<{meta.ftype}>")
            editor.setStyleSheet("color: grey; font-style: italic;")
        self.preview_layout.addRow(label, editor)
        self.blueprint.setdefault("fields", []).append(meta.to_dict())

    def _save(self):
        path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", "", "Jewelry Form (*.jfrm)")
        if not path:
            return
        self.blueprint.to_json(path)
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–§–æ—Ä–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {path}")

    def _validate(self):
        # simple duplicate check
        names = [f["name"] for f in self.blueprint.get("fields", [])]
        dups = {n for n in names if names.count(n) > 1}
        if dups:
            QMessageBox.warning(self, "–ü—Ä–æ–±–ª–µ–º—ã", f"–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è: {', '.join(dups)}")
        else:
            QMessageBox.information(self, "OK", "–í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! üòä")


# ===================== Public API ===================== #

def open_form_builder(model_cls):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–∫–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ñ–æ—Ä–º—ã. –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å *–ø—Ä—è–º–æ –Ω–∞ –≥–æ—Ä—è—á—É—é* –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –∫–æ–¥–∞."""
    from PySide6.QtWidgets import QApplication

    app = QApplication.instance() or QApplication([])
    dlg = FormBuilderWindow(model_cls)
    dlg.resize(900, 600)
    dlg.show()
    if app.instance() is None:  # pragma: no cover ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç
        app.exec()


def load_form(json_path: str) -> QWidget:
    """–°–æ–∑–¥–∞—ë—Ç –≥–æ—Ç–æ–≤—ã–π QWidget –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ *.jfrm\n    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ —Å–µ—Ç–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–∫–Ω–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    bp = FormBlueprint.from_json(json_path)
    container = QWidget()
    layout = QFormLayout(container)
    for fld in bp["fields"]:
        lbl = QLabel(fld["title"])
        if fld["ftype"] in {"str", "uuid", "date", "datetime", "Decimal"}:
            ed = QLineEdit()
        else:
            ed = QLabel(f"<{fld['ftype']}>")
            ed.setStyleSheet("color: grey; font-style: italic;")
        layout.addRow(lbl, ed)
    return container


# ===================== Example usage ===================== #

if __name__ == "__main__":  # –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    import datetime

    @dataclasses.dataclass
    class Order:
        id: int
        number: str
        customer: str
        date: datetime.date
        amount: float

    open_form_builder(Order)
