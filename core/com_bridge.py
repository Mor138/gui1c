# com_bridge.py ‚Ä¢ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å 1–° —á–µ—Ä–µ–∑ COM
import win32com.client
import pywintypes
import os
import tempfile
from typing import Any, Dict, List
from win32com.client import VARIANT
from pythoncom import VT_BOOL

# ---------------------------
# –ú–∞–ø–ø–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
# ---------------------------
PRODUCTION_STATUS_MAP = {
    "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏": "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
    "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":    "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
    "–î–∞–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏":    "–î–∞–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
    "–î–∞–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":       "–î–∞–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
}

# ---------------------------
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
# ---------------------------
def safe_str(val: Any) -> str:
    try:
        if val is None:
            return ""
        if hasattr(val, "GetPresentation"):
            try:
                return str(val.GetPresentation())  # ‚Üê —Å–∫–æ–±–∫–∏ –±—ã–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
            except Exception:
                pass
        for attr in ("Presentation", "Description", "Name", "–ò–º—è"):
            if hasattr(val, attr):
                return str(getattr(val, attr))
        return str(val)
    except Exception as e:
        return f"<error: {e}>"

def log(msg: str) -> None:
    print("[LOG]", msg)
    
   

class COM1CBridge:
    PRODUCTION_STATUSES = [
        "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
        "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
        "–î–∞–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
        "–î–∞–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏"
    ]
    
    def __init__(self, base_path, usr="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", pwd=""):
        self.connector = win32com.client.Dispatch("V83.COMConnector")
        self.connection = self.connector.Connect(
            f'File="{base_path}";Usr="{usr}";Pwd="{pwd}"'
        )
        self.catalogs = self.connection.Catalogs
        self.documents = self.connection.Documents
        self.enums = self.connection.Enums
        
    def print_order_preview_pdf(self, number: str) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–ü–µ—á–∞—Ç—å] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            form = obj.GetForm("–§–æ—Ä–º–∞–î–æ–∫—É–º–µ–Ω—Ç–∞")
            temp_dir = tempfile.gettempdir()
            pdf_path = os.path.join(temp_dir, f"–ó–∞–∫–∞–∑_{number}.pdf")
            form.PrintFormToFile("–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å —Ñ–æ—Ç–æ", pdf_path)

            if os.path.exists(pdf_path):
                log(f"üìÑ PDF —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {pdf_path}")
                os.startfile(pdf_path)  # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return True
            else:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF")
                return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF: {e}")
            return False

    def print_order_preview_pdf_with_photo(self, number: str) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–ü–µ—á–∞—Ç—å] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            form = obj.GetForm("–§–æ—Ä–º–∞–î–æ–∫—É–º–µ–Ω—Ç–∞")
            temp_dir = tempfile.gettempdir()
            pdf_path = os.path.join(temp_dir, f"–ó–∞–∫–∞–∑_{number}_photo.pdf")
            form.PrintFormToFile("–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å —Ñ–æ—Ç–æ", pdf_path)
            if os.path.exists(pdf_path):
                log(f"üìÑ PDF —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {pdf_path}")
                os.startfile(pdf_path)
                return True
            else:
                log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF")
                return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF: {e}")
            return False

    def _find_document_by_number(self, doc_name: str, number: str):
        doc = getattr(self.documents, doc_name, None)
        if not doc:
            log(f"[ERROR] –î–æ–∫—É–º–µ–Ω—Ç '{doc_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        selection = doc.Select()
        while selection.Next():
            obj = selection.GetObject()
            if str(obj.Number).strip() == number.strip():
                return obj
        return None

    def undo_posting(self, number: str) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[UndoPosting] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.UndoPosting()
            obj.Write()
            log(f"‚úî –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{number}")
            return True
        except Exception as e:
            log(f"‚ùå UndoPosting error: {e}")
            return False

    def delete_order_by_number(self, number: str) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–£–¥–∞–ª–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log(f"‚ö† –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω, —Å–Ω–∏–º–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ...")
                self.undo_posting(number)
            obj.Delete()
            log(f"üóë –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            return False

    def post_order(self, number: str) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.–ü—Ä–æ–≤–µ–¥–µ–Ω = True  # <- –Ø–í–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ü–†–û–í–ï–î–ï–ù–ò–Ø
            obj.Write()          # <- –æ–±—ã—á–Ω—ã–π Write –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ –ü—Ä–æ–≤–µ–¥–µ–Ω")
                return True
            else:
                log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ ‚Ññ{number}")
                return False
        except Exception as e:
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ü—Ä–æ–≤–µ–¥–µ–Ω: {e}")
            return False


    def mark_order_for_deletion(self, number: str) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–ü–æ–º–µ—Ç–∫–∞] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log("‚ö† –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω. –°–Ω–∏–º–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–º–µ—Ç–∫–æ–π")
                obj.UndoPosting()
                obj.Write()
            obj.DeletionMark = VARIANT(VT_BOOL, True)
            obj.Write()
            if getattr(obj, "DeletionMark", False):
                log(f"üóë –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –ø–æ–º–µ—á–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
                return True
            else:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–º–µ—Ç–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
                return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–º–µ—Ç–∫–∏: {e}")
            return False
            
    def unmark_order_deletion(self, number: str) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–°–Ω—è—Ç–∏–µ –ø–æ–º–µ—Ç–∫–∏] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.DeletionMark = VARIANT(VT_BOOL, False)
            obj.Write()
            if not getattr(obj, "DeletionMark", True):
                log(f"‚úÖ –ü–æ–º–µ—Ç–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Ññ{number}")
                return True
            else:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø–æ–º–µ—Ç–∫—É")
                return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø–æ–º–µ—Ç–∫–∏: {e}")
            return False        

    def get_articles(self):
        result = {}
        catalog = getattr(self.catalogs, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", None)
        if not catalog:
            return result
        selection = catalog.Select()
        while selection.Next():
            obj = selection.GetObject()
            art = safe_str(getattr(obj, "–ê—Ä—Ç–∏–∫—É–ª", ""))
            result[art] = {
                "name": safe_str(obj.Description),
                "variant": safe_str(getattr(obj, "–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "")),
                "size": getattr(obj, "–†–∞–∑–º–µ—Ä1", ""),
                "w": getattr(obj, "–°—Ä–µ–¥–Ω–∏–π–í–µ—Å", 0),
            }
        return result

    def get_size_ref(self, size_value):
        catalog = getattr(self.catalogs, "–†–∞–∑–º–µ—Ä—ã", None)
        if catalog is None:
            log("‚ùå –ö–∞—Ç–∞–ª–æ–≥ '–†–∞–∑–º–µ—Ä—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        selection = catalog.Select()
        while selection.Next():
            obj = selection.GetObject()
            if str(obj.Description).strip().replace(",", ".") == str(size_value).strip().replace(",", "."):
                return obj.Ref
        log(f"‚ùå –†–∞–∑–º–µ—Ä '{size_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ '–†–∞–∑–º–µ—Ä—ã'")
        return None

    def cache_variants(self):
        self._all_variants = []
        catalog = getattr(self.catalogs, "–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", None)
        if catalog is None:
            return
        selection = catalog.Select()
        while selection.Next():
            item = selection.GetObject()
            self._all_variants.append(str(item.Description))

    def get_variants_by_article(self, article_prefix: str) -> list[str]:
        if not hasattr(self, "_all_variants"):
            self.cache_variants()
        prefix = article_prefix.strip() + "-"
        return [name for name in self._all_variants if name.startswith(prefix)]


    def get_ref(self, catalog_name, description):
        obj = self.get_catalog_object_by_description(catalog_name, description)
        return obj.Ref if hasattr(obj, "Ref") else obj

    def get_last_order_number(self):
        doc = getattr(self.documents, "–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if not doc:
            return "00–Æ–ü-000000"
        selection = doc.Select()
        number = "00–Æ–ü-000000"
        while selection.Next():
            try:
                obj = selection.GetObject()
                number = str(obj.Number)
            except:
                continue
        return number

    def get_next_order_number(self):
        last = self.get_last_order_number()
        try:
            prefix, num = last.split("-")
            next_num = int(num) + 1
            return f"{prefix}-{next_num:06d}"
        except:
            return "00–Æ–ü-000001"
            
    def to_string(self, value):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1–° Application"""
        try:
            return str(self.connection.String(value))
        except Exception as e:
            log(f"[to_string] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: {e}")
            return "[??]"     
            
    def get_catalog_object_by_description(self, catalog_name, description):
        if catalog_name == "–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
            predefined = {
                "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏": "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
                "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":    "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
                "–î–∞–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏":    "–î–∞–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
                "–î–∞–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":       "–î–∞–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏"
            }
            internal = predefined.get(description.strip())
            if internal:
                enum = getattr(self.enums, "–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", None)
                if enum:
                    try:
                        val = getattr(enum, internal)
                        log(f"[{catalog_name}] –ù–∞–π–¥–µ–Ω (Enum): {description} ‚Üí {internal}")
                        return val
                    except Exception as e:
                        log(f"[Enum Error] {catalog_name}.{internal}: {e}")
            log(f"[{catalog_name}] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}")
            return None

        catalog = getattr(self.catalogs, catalog_name, None)
        if not catalog:
            log(f"–ö–∞—Ç–∞–ª–æ–≥ '{catalog_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        selection = catalog.Select()
        while selection.Next():
            obj = selection.GetObject()
            if str(obj.Description).strip() == str(description).strip():
                log(f"[{catalog_name}] –ù–∞–π–¥–µ–Ω: {description}")
                return obj
        log(f"[{catalog_name}] –ù–µ –Ω–∞–π–¥–µ–Ω: {description}")
        return None        
            

    def get_production_status_variants(self) -> list[str]:
        return list(PRODUCTION_STATUS_MAP.keys()) 
        
    def print_order_with_photo(self, number: str):
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–ü–µ—á–∞—Ç—å] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            form = obj.GetForm("–§–æ—Ä–º–∞–î–æ–∫—É–º–µ–Ω—Ç–∞")
            form.Open()  # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –ø–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã
            form.PrintForm("–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å —Ñ–æ—Ç–æ")
            log(f"üñ® –ü–µ—á–∞—Ç—å —Ñ–æ—Ä–º—ã '–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å —Ñ–æ—Ç–æ' –∑–∞–ø—É—â–µ–Ω–∞")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
            return False    

    def update_order(self, number: str, fields: dict, items: list) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number)
        if not obj:
            log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–µ–π
        for k, v in fields.items():
            try:
                if k == "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
                    ref = self.get_ref("–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", v)
                    if ref:
                        setattr(obj, k, ref)
                    continue
                if k in ["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–°–∫–ª–∞–¥"]:
                    ref = self.get_ref(k + "—ã" if not k.endswith("—Ç") else k + "–∞", v)
                    if ref:
                        setattr(obj, k, ref)
                    continue
                setattr(obj, k, v)
            except Exception as e:
                log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—è {k}: {e}")

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
        while len(obj.–¢–æ–≤–∞—Ä—ã) > 0:
            obj.–¢–æ–≤–∞—Ä—ã.Delete(0)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        for row in items:
            try:
                new_row = obj.–¢–æ–≤–∞—Ä—ã.Add()
                new_row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"))
                variant = row.get("–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
                if variant and variant != "‚Äî":
                    new_row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", variant)
                size_val = row.get("–†–∞–∑–º–µ—Ä", 0)
                new_row.–†–∞–∑–º–µ—Ä = self.get_size_ref(size_val)
                new_row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = int(row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1))
                new_row.–í–µ—Å = float(row.get("–í–µ—Å", 0))
                new_row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ = row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "")
            except Exception as e:
                log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

        try:
            obj.Write()
            log(f"‚úî –û–±–Ω–æ–≤–ª—ë–Ω –∑–∞–∫–∞–∑ ‚Ññ{number}")
            return True
        except Exception as e:
            log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False        
   

    def create_order(self, fields, items):
        doc = self.documents.–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.CreateDocument()
        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        catalog_fields_map = {
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
            "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": "–î–æ–≥–æ–≤–æ—Ä—ã–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤",
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "–°–∫–ª–∞–¥": "–°–∫–ª–∞–¥—ã",
        }

        # ‚Üê –í–ê–ñ–ù–û: –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å self

        log("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ª—è:")
        for k, v in fields.items():
            try:
                log(f"  -> {k} = {v}")
                if k == "–°–∫–ª–∞–¥":
                    log("    ‚ö† –ü–æ–ª–µ '–°–∫–ª–∞–¥' –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                if k == "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
                    reverse_map = {v: k for k, v in PRODUCTION_STATUS_MAP.items()}
                    if v in reverse_map:
                        v = reverse_map[v]
                    
                    ref = self.get_ref("–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", v)
                    log(f"[ref] {k}: {v} => {ref}")
                    if ref:
                        setattr(doc, k, ref)
                        log(f"    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {k} (Ref: {ref})")
                    else:
                        log(f"    ‚ùå {k} '{v}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

                if k in catalog_fields_map:
                    ref = self.get_ref(catalog_fields_map[k], v)
                    log(f"[ref] {k}: {v} => {ref}")
                    if ref:
                        setattr(doc, k, ref)
                        log(f"    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {k} (Ref: {ref})")
                    else:
                        log(f"    ‚ùå {k} '{v}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

                setattr(doc, k, v)
            except Exception as e:
                log(f"    ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—è {k}: {e}")

        log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∑–∞–∫–∞–∑–∞:")
        for row in items:
            try:
                log(f"  -> —Å—Ç—Ä–æ–∫–∞: {row}")
                new_row = doc.–¢–æ–≤–∞—Ä—ã.Add()
                new_row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"))

                variant = row.get("–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
                if variant and variant != "‚Äî":
                    new_row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", variant)

                size_val = row.get("–†–∞–∑–º–µ—Ä", 0)
                size_ref = self.get_size_ref(size_val)
                if size_ref:
                    new_row.–†–∞–∑–º–µ—Ä = size_ref
                else:
                    log(f"    ‚ùå –†–∞–∑–º–µ—Ä '{size_val}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—â–µ–Ω")

                new_row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = int(row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1))
                new_row.–í–µ—Å = float(row.get("–í–µ—Å", 0))
                log(f"    -> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {row.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ')}")
                new_row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ = row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "")

            except Exception as e:
                log(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

        try:
            log("–ü—Ä–æ–≤–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc.Write()
            log(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω. –ù–æ–º–µ—Ä: {doc.Number}")
            return str(doc.Number)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞: {e}" 

    def list_orders(self, limit=1000) -> List[Dict[str, Any]]:
        result = []
        doc = getattr(self.documents, "–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if doc is None:
            return result

        selection = doc.Select()
        while selection.Next() and len(result) < limit:
            obj = selection.GetObject()
            rows = []
            for line in obj.–¢–æ–≤–∞—Ä—ã:
                rows.append({
                    "nomenclature": safe_str(getattr(line, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "")),
                    "variant": safe_str(getattr(line, "–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "")),
                    "status": safe_str(getattr(line, "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏", "")),  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                    "size": getattr(line, "–†–∞–∑–º–µ—Ä", 0),
                    "qty": getattr(line, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 0),
                    "w": getattr(line, "–í–µ—Å", 0),
                    "note": safe_str(getattr(line, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", ""))  # ‚Üê –≤–æ—Ç —ç—Ç–æ
                })

            prod_status = self.to_string(getattr(obj, "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏", None))

            result.append({
                "num": str(obj.Number),
                "date": str(obj.Date),
                "contragent": safe_str(getattr(obj, "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "")),
                "org": safe_str(getattr(obj, "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "")),
                "contract": safe_str(getattr(obj, "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", "")),
                "prod_status": prod_status,
                "qty": sum([getattr(x, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 0) for x in obj.–¢–æ–≤–∞—Ä—ã]),
                "weight": round(sum([getattr(x, "–í–µ—Å", 0) for x in obj.–¢–æ–≤–∞—Ä—ã]), 3),
                "comment": safe_str(getattr(obj, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "")),
                "deleted": getattr(obj, "DeletionMark", False),
                "posted": getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False),
                "rows": rows
            })

        return result

    def list_catalog_items(self, catalog_name, limit=1000):
        result = []
        catalog = getattr(self.catalogs, catalog_name, None)
        if not catalog:
            log(f"[Catalog Error] {catalog_name}: not found")
            return result
        selection = catalog.Select()
        count = 0
        while selection.Next() and count < limit:
            obj = selection.GetObject()
            result.append({
                "Description": safe_str(obj.Description),
                "Ref": obj.Ref
            })
            count += 1
        return result