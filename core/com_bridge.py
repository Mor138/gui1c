# com_bridge.py ‚Ä¢ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å 1–° —á–µ—Ä–µ–∑ COM v0.8
# -*- coding: utf-8 -*-
import win32com.client
import pywintypes
import os
import tempfile
from typing import Any, Dict, List
from win32com.client import VARIANT
from pythoncom import VT_BOOL
from collections import defaultdict
from datetime import datetime, timedelta

from .logger import logger
import config

# ---------------------------
# –ú–∞–ø–ø–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
# ---------------------------
PRODUCTION_STATUS_MAP = {
    "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏": "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
    "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":    "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
    "–î–∞–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏":    "–î–∞–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
    "–î–∞–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":       "–î–∞–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
}

# ---------------------------
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
# ---------------------------
def safe_str(val: Any) -> str:
    try:
        if val is None:
            return ""
        if hasattr(val, "GetPresentation"):
            try:
                return str(val.GetPresentation())  # ‚Üê —Å–∫–æ–±–∫–∏ –±—ã–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
            except Exception:
                pass
        for attr in ("Presentation", "Description", "Name", "–ò–º—è"):
            if hasattr(val, attr):
                return str(getattr(val, attr))
        return str(val)
    except Exception as e:
        return f"<error: {e}>"
        
       

def log(msg: str) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å logging —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è."""
    text = str(msg)
    lower = text.lower()
    if "‚ùå" in text or "error" in lower or "–æ—à–∏–±–∫–∞" in lower:
        logger.error(text)
    elif "‚ö†" in text or "warning" in lower:
        logger.warning(text)
    else:
        logger.info(text)
    
   

class COM1CBridge:
    PRODUCTION_STATUSES = [
        "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
        "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
        "–î–∞–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
        "–î–∞–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏"
    ]
    
    
    def __init__(self, base_path, usr="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", pwd=""):
        self.connector = win32com.client.Dispatch("V83.COMConnector")
        self.connection = self.connector.Connect(
            f'File="{base_path}";Usr="{usr}";Pwd="{pwd}"'
        )
        self.catalogs = self.connection.Catalogs
        self.documents = self.connection.Documents
        self.enums = self.connection.Enums
        # –ö—ç—à —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        self._ref_cache: dict[str, dict[str, Any]] = {}
        

        
    def get_wax_job_lines(self, doc_num: str) -> list[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—á–Ω—É—é —á–∞—Å—Ç—å '–¢–æ–≤–∞—Ä—ã–í—ã–¥–∞–Ω–æ' –ø–æ –Ω–æ–º–µ—Ä—É –Ω–∞—Ä—è–¥–∞"""
        result = []
        doc_manager = getattr(self.connection.Documents, "–ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è", None)
        if not doc_manager:
            return result

        selection = doc_manager.Select()
        while selection.Next():
            doc = selection.GetObject()
            if str(doc.Number) == doc_num:
                for row in doc.–¢–æ–≤–∞—Ä—ã–í—ã–¥–∞–Ω–æ:
                    result.append({
                        "norm": self.safe(row, "–í–∏–¥–ù–æ—Ä–º–∞—Ç–∏–≤–∞"),
                        "nomen": self.safe(row, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"),
                        "size": self.safe(row, "–†–∞–∑–º–µ—Ä"),
                        "sample": self.safe(row, "–ü—Ä–æ–±–∞"),
                        "color": self.safe(row, "–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞"),
                        "qty": row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                        "weight": round(float(row.–í–µ—Å), config.WEIGHT_DECIMALS) if hasattr(row, "–í–µ—Å") else "",
                    })
                break
        return result    
        
    def safe(self, obj, attr):
        try:
            val = getattr(obj, attr, None)
            if val is None:
                return ""
            if hasattr(val, "GetPresentation"):
                return str(val.GetPresentation())
            if hasattr(val, "Presentation"):
                return str(val.Presentation)
            if hasattr(val, "Description"):
                return str(val.Description)
            return str(val)
        except Exception as e:
            return "<err>"    
        
    def print_order_preview_pdf(self, number: str, date: str | None = None) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–ü–µ—á–∞—Ç—å] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            form = obj.GetForm("–§–æ—Ä–º–∞–î–æ–∫—É–º–µ–Ω—Ç–∞")
            temp_dir = tempfile.gettempdir()
            pdf_path = os.path.join(temp_dir, f"–ó–∞–∫–∞–∑_{number}.pdf")
            form.PrintFormToFile("–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å —Ñ–æ—Ç–æ", pdf_path)

            if os.path.exists(pdf_path):
                log(f"üìÑ PDF —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {pdf_path}")
                os.startfile(pdf_path)  # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return True
            else:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF")
                return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF: {e}")
            return False     

    def _find_document_by_number(self, doc_name: str, number: str, date: str | None = None):
        doc = getattr(self.documents, doc_name, None)
        if not doc:
            log(f"[ERROR] –î–æ–∫—É–º–µ–Ω—Ç '{doc_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        selection = doc.Select()
        found = None
        while selection.Next():
            obj = selection.GetObject()
            if str(obj.Number).strip() == number.strip():
                if date:
                    if str(obj.Date)[:10] == str(date)[:10]:
                        return obj
                elif not found or obj.Date > found.Date:
                    found = obj
        return found
        
    def _find_doc(self, doc_name: str, num: str):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä—É"""
        try:
            docs = getattr(self.connection.Documents, doc_name)
        except AttributeError:
            raise Exception(f"–î–æ–∫—É–º–µ–Ω—Ç '{doc_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        selection = docs.Select()
        while selection.Next():
            doc = selection.GetObject()
            if str(doc.Number).strip() == str(num).strip():
                return doc
        raise Exception(f"–î–æ–∫—É–º–µ–Ω—Ç '{doc_name}' —Å –Ω–æ–º–µ—Ä–æ–º {num} –Ω–µ –Ω–∞–π–¥–µ–Ω")    

    def undo_posting(self, number: str, date: str | None = None) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[UndoPosting] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.UndoPosting()
            obj.Write()
            log(f"‚úî –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{number}")
            return True
        except Exception as e:
            log(f"‚ùå UndoPosting error: {e}")
            return False

    def delete_order_by_number(self, number: str, date: str | None = None) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–£–¥–∞–ª–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log(f"‚ö† –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω, —Å–Ω–∏–º–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ...")
                self.undo_posting(number)
            obj.Delete()
            log(f"üóë –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            return False

    def post_order(self, number: str, date: str | None = None) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.–ü—Ä–æ–≤–µ–¥–µ–Ω = True  # <- –Ø–í–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ü–†–û–í–ï–î–ï–ù–ò–Ø
            obj.Write()          # <- –æ–±—ã—á–Ω—ã–π Write –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ –ü—Ä–æ–≤–µ–¥–µ–Ω")
                return True
            else:
                log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ ‚Ññ{number}")
                return False
        except Exception as e:
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ü—Ä–æ–≤–µ–¥–µ–Ω: {e}")
            return False
            

    def mark_order_for_deletion(self, number: str, date: str | None = None) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–ü–æ–º–µ—Ç–∫–∞] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log("‚ö† –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω. –°–Ω–∏–º–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–º–µ—Ç–∫–æ–π")
                obj.UndoPosting()
                obj.Write()
            obj.DeletionMark = VARIANT(VT_BOOL, True)
            obj.Write()
            if getattr(obj, "DeletionMark", False):
                log(f"üóë –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –ø–æ–º–µ—á–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
                return True
            else:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–º–µ—Ç–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
                return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–º–µ—Ç–∫–∏: {e}")
            return False
            
    def unmark_order_deletion(self, number: str, date: str | None = None) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–°–Ω—è—Ç–∏–µ –ø–æ–º–µ—Ç–∫–∏] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.DeletionMark = VARIANT(VT_BOOL, False)
            obj.Write()
            if not getattr(obj, "DeletionMark", True):
                log(f"‚úÖ –ü–æ–º–µ—Ç–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Ññ{number}")
                return True
            else:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø–æ–º–µ—Ç–∫—É")
                return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø–æ–º–µ—Ç–∫–∏: {e}")
            return False        

    def get_articles(self):
        result = {}
        catalog = getattr(self.catalogs, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", None)
        if not catalog:
            return result
        selection = catalog.Select()
        while selection.Next():
            obj = selection.GetObject()
            art = safe_str(getattr(obj, "–ê—Ä—Ç–∏–∫—É–ª", ""))
            result[art] = {
                "name": safe_str(obj.Description),
                "variant": safe_str(getattr(obj, "–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "")),
                "size": getattr(obj, "–†–∞–∑–º–µ—Ä1", ""),
                "w": getattr(obj, "–°—Ä–µ–¥–Ω–∏–π–í–µ—Å", 0),
            }
        return result

    def get_size_ref(self, size_value):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–∑–º–µ—Ä —Å —É—á—ë—Ç–æ–º –∫–µ—à–∞."""
        desc = str(size_value).strip().replace(",", ".")
        ref = self.get_ref_by_description("–†–∞–∑–º–µ—Ä—ã", desc)
        if not ref:
            log(f"‚ùå –†–∞–∑–º–µ—Ä '{size_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ '–†–∞–∑–º–µ—Ä—ã'")
        return ref

    def cache_variants(self):
        self._all_variants = []
        catalog = getattr(self.catalogs, "–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", None)
        if catalog is None:
            return
        selection = catalog.Select()
        while selection.Next():
            item = selection.GetObject()
            self._all_variants.append(str(item.Description))

    def get_variants_by_article(self, article_prefix: str) -> list[str]:
        if not hasattr(self, "_all_variants"):
            self.cache_variants()
        prefix = article_prefix.strip() + "-"
        return [name for name in self._all_variants if name.startswith(prefix)]


    def get_ref(self, catalog_name, description):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è."""
        return self.get_ref_by_description(catalog_name, description)


    def get_enum_by_description(self, enum_name: str, description: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é"""
        enum = getattr(self.enums, enum_name, None)
        if not enum:
            log(f"–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ '{enum_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
        if description is None:
            return None

        desc = str(description).strip().lower()
        try:
            for attr in dir(enum):
                if attr.startswith("_"):
                    continue
                try:
                    val = getattr(enum, attr)
                except Exception:
                    continue
                pres = ""
                try:
                    if hasattr(val, "GetPresentation"):
                        pres = str(val.GetPresentation())
                    elif hasattr(val, "Presentation"):
                        pres = str(val.Presentation)
                    else:
                        pres = str(val)
                except Exception:
                    pres = str(val)

                if pres.strip().lower() == desc or attr.lower() == desc:
                    return val
        except Exception as e:
            log(f"[Enum] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {description} –≤ {enum_name}: {e}")

        log(f"[{enum_name}] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {description}")
        return None

    def get_last_order_number(self):
        doc = getattr(self.documents, "–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if not doc:
            return "00–Æ–ü-000000"
        selection = doc.Select()
        number = "00–Æ–ü-000000"
        while selection.Next():
            try:
                obj = selection.GetObject()
                number = str(obj.Number)
            except:
                continue
        return number

    def get_next_order_number(self):
        last = self.get_last_order_number()
        try:
            prefix, num = last.split("-")
            next_num = int(num) + 1
            return f"{prefix}-{next_num:06d}"
        except:
            return "00–Æ–ü-000001"

    # ------------------------------------------------------------------
    def get_last_task_number(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'."""
        doc = getattr(self.documents, "–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if not doc:
            return "–¢–ü-000000"
        selection = doc.Select()
        number = "–¢–ü-000000"
        while selection.Next():
            try:
                obj = selection.GetObject()
                number = str(obj.Number)
            except Exception:
                continue
        return number

    def get_next_task_number(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ."""
        last = self.get_last_task_number()
        try:
            prefix, num = last.split("-")
            next_num = int(num) + 1
            return f"{prefix}-{next_num:06d}"
        except Exception:
            return "–¢–ü-000001"
            
    def to_string(self, value):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1–° Application"""
        try:
            return str(self.connection.String(value))
        except Exception as e:
            log(f"[to_string] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: {e}")
            return "[??]"     
            
    def get_catalog_object_by_description(self, catalog_name, description):
        if catalog_name == "–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
            predefined = {
                "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏": "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
                "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":    "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
                "–î–∞–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏":    "–î–∞–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
                "–î–∞–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":       "–î–∞–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏"
            }
            internal = predefined.get(description.strip())
            if internal:
                enum = getattr(self.enums, "–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", None)
                if enum:
                    try:
                        val = getattr(enum, internal)
                        log(f"[{catalog_name}] –ù–∞–π–¥–µ–Ω (Enum): {description} ‚Üí {internal}")
                        return val
                    except Exception as e:
                        log(f"[Enum Error] {catalog_name}.{internal}: {e}")
            log(f"[{catalog_name}] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}")
            return None

        catalog = getattr(self.catalogs, catalog_name, None)
        if not catalog:
            log(f"–ö–∞—Ç–∞–ª–æ–≥ '{catalog_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        selection = catalog.Select()
        while selection.Next():
            obj = selection.GetObject()
            if str(obj.Description).strip() == str(description).strip():
                log(f"[{catalog_name}] –ù–∞–π–¥–µ–Ω: {description}")
                return obj
        log(f"[{catalog_name}] –ù–µ –Ω–∞–π–¥–µ–Ω: {description}")
        return None        

    def update_order(self, number: str, fields: dict, items: list, date: str | None = None) -> bool:
        obj = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–µ–π
        for k, v in fields.items():
            try:
                if k == "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
                    ref = self.get_ref("–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", v)
                    if ref:
                        setattr(obj, k, ref)
                    continue
                if k in ["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–°–∫–ª–∞–¥"]:
                    ref = self.get_ref(k + "—ã" if not k.endswith("—Ç") else k + "–∞", v)
                    if ref:
                        setattr(obj, k, ref)
                    continue
                setattr(obj, k, v)
            except Exception as e:
                log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—è {k}: {e}")

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
        while len(obj.–¢–æ–≤–∞—Ä—ã) > 0:
            obj.–¢–æ–≤–∞—Ä—ã.Delete(0)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        for row in items:
            try:
                new_row = obj.–¢–æ–≤–∞—Ä—ã.Add()
                new_row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"))
                variant = row.get("–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
                if variant and variant != "‚Äî":
                    new_row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", variant)
                size_val = row.get("–†–∞–∑–º–µ—Ä", 0)
                new_row.–†–∞–∑–º–µ—Ä = self.get_size_ref(size_val)
                new_row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = int(row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1))
                new_row.–í–µ—Å = float(row.get("–í–µ—Å", 0))
                new_row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ = row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "")
            except Exception as e:
                log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

        try:
            obj.Write()
            log(f"‚úî –û–±–Ω–æ–≤–ª—ë–Ω –∑–∞–∫–∞–∑ ‚Ññ{number}")
            return True
        except Exception as e:
            log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False        
   

    def create_order(self, fields, items):
        doc = self.documents.–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.CreateDocument()
        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–ø–æ–ª–µ '–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        catalog_fields_map = {
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
            "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": "–î–æ–≥–æ–≤–æ—Ä—ã–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤",
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "–°–∫–ª–∞–¥": "–°–∫–ª–∞–¥—ã",
        }

        # ‚Üê –í–ê–ñ–ù–û: –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å self

        log("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ª—è:")
        for k, v in fields.items():
            try:
                log(f"  -> {k} = {v}")
                if k == "–°–∫–ª–∞–¥":
                    log("    ‚ö† –ü–æ–ª–µ '–°–∫–ª–∞–¥' –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                if k == "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
                    reverse_map = {v: k for k, v in PRODUCTION_STATUS_MAP.items()}
                    if v in reverse_map:
                        v = reverse_map[v]
                    
                    ref = self.get_ref("–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", v)
                    log(f"[ref] {k}: {v} => {ref}")
                    if ref:
                        setattr(doc, k, ref)
                        log(f"    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {k} (Ref: {ref})")
                    else:
                        log(f"    ‚ùå {k} '{v}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

                if k in catalog_fields_map:
                    ref = self.get_ref(catalog_fields_map[k], v)
                    log(f"[ref] {k}: {v} => {ref}")
                    if ref:
                        setattr(doc, k, ref)
                        log(f"    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {k} (Ref: {ref})")
                    else:
                        log(f"    ‚ùå {k} '{v}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

                setattr(doc, k, v)
            except Exception as e:
                log(f"    ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—è {k}: {e}")

        log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∑–∞–∫–∞–∑–∞:")
        for row in items:
            try:
                log(f"  -> —Å—Ç—Ä–æ–∫–∞: {row}")
                new_row = doc.–¢–æ–≤–∞—Ä—ã.Add()
                new_row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"))

                variant = row.get("–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
                if variant and variant != "‚Äî":
                    new_row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", variant)

                size_val = row.get("–†–∞–∑–º–µ—Ä", 0)
                size_ref = self.get_size_ref(size_val)
                if size_ref:
                    new_row.–†–∞–∑–º–µ—Ä = size_ref
                else:
                    log(f"    ‚ùå –†–∞–∑–º–µ—Ä '{size_val}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—â–µ–Ω")

                new_row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = int(row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1))
                new_row.–í–µ—Å = float(row.get("–í–µ—Å", 0))
                log(f"    -> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {row.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ')}")
                new_row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ = row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "")

            except Exception as e:
                log(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

        try:
            log("–ü—Ä–æ–≤–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc.Write()
            log(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω. –ù–æ–º–µ—Ä: {doc.Number}")
            return str(doc.Number)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"
            
    def get_doc_object_by_number(self, doc_type: str, number: str, date: str | None = None):
        try:
            catalog = getattr(self.connection.Documents, doc_type)
            selection = catalog.Select()
            while selection.Next():
                doc = selection.GetObject()
                if str(doc.Number).strip() == str(number).strip():
                    if date is None or str(doc.Date)[:10] == str(date)[:10]:
                        log(f"[get_doc_object_by_number] ‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_type} ‚Ññ{number}")
                        return doc
            log(f"[get_doc_object_by_number] ‚ùå –î–æ–∫—É–º–µ–Ω—Ç {doc_type} ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            log(f"[get_doc_object_by_number] ‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

    def get_doc_ref(self, doc_name: str, number: str, date: str | None = None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É."""
        docs = getattr(self.connection.Documents, doc_name, None)
        if docs is None:
            log(f"[get_doc_ref] –î–æ–∫—É–º–µ–Ω—Ç '{doc_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        selection = docs.Select()
        while selection.Next():
            doc = selection.GetObject()
            if str(doc.Number).strip() == str(number).strip():
                if date is None or str(doc.Date)[:10] == str(date)[:10]:
                    log(f"[get_doc_ref] ‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç {doc_name} ‚Ññ{number}")
                    return doc.Ref

        log(f"[get_doc_ref] ‚ùå –î–æ–∫—É–º–µ–Ω—Ç {doc_name} ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    # ------------------------------------------------------------------
    def list_orders(self):
        result = []
        orders = self.connection.Documents.–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.Select()
        while orders.Next():
            doc = orders.GetObject()
            rows = []
            for row in doc.–¢–æ–≤–∞—Ä—ã:
                rows.append({
                    "nomenclature": safe_str(row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞),
                    "size": safe_str(row.–†–∞–∑–º–µ—Ä),
                    "qty": row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                    "w": row.–í–µ—Å,
                    "variant": safe_str(row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è),
                    "note": row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ,
                })
            result.append({
                "Ref": doc.Ref,  # ‚Üê –≤–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è Ref
                "num": doc.–ù–æ–º–µ—Ä,
                "date": str(doc.–î–∞—Ç–∞),
                "org": safe_str(doc.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è),
                "contragent": safe_str(doc.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç),
                "contract": safe_str(doc.–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞),
                "comment": safe_str(doc.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π),
                "prod_status": self.to_string(doc.–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏),
                "posted": doc.–ü—Ä–æ–≤–µ–¥–µ–Ω,
                "deleted": doc.–ü–æ–º–µ—Ç–∫–∞–£–¥–∞–ª–µ–Ω–∏—è,
                "qty": sum([r["qty"] for r in rows]),
                "weight": sum([r["w"] for r in rows]),
                "rows": rows
            })
        return result

    def list_catalog_items(self, catalog_name: str, limit: int = 1000) -> list[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
        result = []
        try:
            catalog = getattr(self.connection.Catalogs, catalog_name, None)
            if catalog is None:
                log(f"[Catalog Error] –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ '{catalog_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return result

            selection = catalog.Select()
            count = 0
            while selection.Next() and count < limit:
                obj = selection.GetObject()
                item = {
                    "Ref": str(obj.Ref),
                    "Code": str(obj.Code),
                    "Description": str(obj.Description)
                }
                result.append(item)
                count += 1
            return result
        except Exception as e:
            log(f"[Catalog Exception] {catalog_name}: {e}")
            return []
            
    def log_catalog_contents(self, catalog_name: str, limit: int = 1000):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
        print(f"[Catalog Dump] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ '{catalog_name}':")
        items = self.list_catalog_items(catalog_name, limit)
        if not items:
            print("üì≠ –ü—É—Å—Ç–æ –∏–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        for item in items:
            print(f" - {item.get('Description', '?')} (–ö–æ–¥: {item.get('Code', '?')}, Ref: {item.get('Ref', '?')})")       
        
    def list_tasks(self) -> list[dict]:
        result = []
        doc_manager = getattr(self.connection.Documents, "–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if doc_manager is None:
            return result
        selection = doc_manager.Select()
        while selection.Next():
            doc = selection.GetObject()
            result.append({
                "ref": str(doc.Ref),
                "num": str(doc.Number),
                "date": str(doc.Date.strftime("%d.%m.%Y")),
                "employee": self.safe(doc, "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"),
                "tech_op": self.safe(doc, "–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è"),
                "section": self.safe(doc, "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫"),
                "posted": getattr(doc, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False),
                "deleted": getattr(doc, "–ü–æ–º–µ—Ç–∫–∞–£–¥–∞–ª–µ–Ω–∏—è", False),
            })
        return result
        
    def detect_method_from_items(self, items: list[dict]) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        for row in items:
            name = row.get("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "").lower()
            if "–¥" in name or "d" in name:
                return "3D –ø–µ—á–∞—Ç—å"
        return "–†–µ–∑–∏–Ω–∞"    
        
    def find_production_task_ref_by_method(self, method: str) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É."""
        method_ref = self.get_ref_by_description("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", method)
        if not method_ref:
            self.log_catalog_contents("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã")
        if method_ref is None:
            log(f"[find_production_task_ref_by_method] –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç {method}")
            return None

        doc_manager = getattr(self.connection.Documents, "–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if doc_manager is None:
            log("[find_production_task_ref_by_method] –î–æ–∫—É–º–µ–Ω—Ç '–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        tasks = doc_manager.Select()
        while tasks.Next():
            obj = tasks.GetObject()
            for row in obj.–¢–æ–≤–∞—Ä—ã:
                if row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è == method_ref:
                    return str(obj.Ref)
        return None
        

    def list_wax_jobs(self) -> list[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—è–¥–æ–≤ –Ω–∞ –≤–æ—Å–∫–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è –∏–∑ 1–°."""
        result = []
        docs = self.connection.Documents.–ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è.Select()
        while docs.Next():
            obj = docs.GetObject()


            rows = getattr(obj, "–¢–æ–≤–∞—Ä—ã–í—ã–¥–∞–Ω–æ", [])
            rows = getattr(obj, "–í—ã–¥–∞–Ω–æ", [])
            weight = 0.0
            qty = 0
            for r in rows:
                weight += getattr(r, "–í–µ—Å", 0)
                qty += getattr(r, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 0)

            result.append({
                "–ù–æ–º–µ—Ä": str(obj.–ù–æ–º–µ—Ä),
                "–î–∞—Ç–∞": obj.–î–∞—Ç–∞.strftime("%d.%m.%Y"),
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": safe_str(obj.–°–æ—Ç—Ä—É–¥–Ω–∏–∫.Description),
                "–í–µ—Å": weight,
                "–ö–æ–ª-–≤–æ": qty,
                "–ü—Ä–æ–≤–µ–¥–µ–Ω": obj.–ü—Ä–æ–≤–µ–¥–µ–Ω,
                "–ó–∞–∫—Ä—ã—Ç": "‚úÖ" if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False) else "‚Äî",
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": safe_str(obj.–°–æ—Ç—Ä—É–¥–Ω–∏–∫),
                "–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è": safe_str(obj.–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è),
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": safe_str(obj.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π),
                "–°–∫–ª–∞–¥": safe_str(obj.–°–∫–ª–∞–¥),
                "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫": safe_str(obj.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫),
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": safe_str(obj.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è),
                "–ó–∞–¥–∞–Ω–∏–µ": safe_str(getattr(obj, "–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "")) or "‚Äî",
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": safe_str(obj.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π),
                "–í–µ—Å": round(weight, 2),
                "–ö–æ–ª-–≤–æ": qty,
            })
        return result
        
    def get_ref_by_description(self, catalog_name: str, description: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        if catalog_name == "–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
            predefined = {
                "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏": "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
                "–°–æ–±—Å—Ç–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":    "–°–æ–±—Å—Ç–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
                "–î–∞–≤ –º–µ—Ç–∞–ª–ª, —Å–æ–±—Å—Ç–≤ –∫–∞–º–Ω–∏":    "–î–∞–≤–ú–µ—Ç–∞–ª–ª–°–æ–±—Å—Ç–≤–ö–∞–º–Ω–∏",
                "–î–∞–≤ –º–µ—Ç–∞–ª–ª, –¥–∞–≤ –∫–∞–º–Ω–∏":       "–î–∞–≤–ú–µ—Ç–∞–ª–ª–î–∞–≤–ö–∞–º–Ω–∏",
            }
            internal = predefined.get(str(description).strip())
            if internal:
                enum = getattr(self.enums, "–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", None)
                if enum is not None:
                    try:
                        return getattr(enum, internal)
                    except Exception as e:
                        log(f"[Enum Error] {catalog_name}.{internal}: {e}")
            log(f"[{catalog_name}] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}")
            return None

        desc = str(description).strip().lower()
        if catalog_name == "–†–∞–∑–º–µ—Ä—ã":
            desc = desc.replace(",", ".")

        cache = self._ref_cache.get(catalog_name)
        if cache is None:
            catalog = getattr(self.connection.Catalogs, catalog_name, None)
            if catalog is None:
                log(f"[get_ref_by_description] –ö–∞—Ç–∞–ª–æ–≥ '{catalog_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            cache = {}
            selection = catalog.Select()
            while selection.Next():
                obj = selection.GetObject()
                key = str(obj.Description).strip().lower()
                if catalog_name == "–†–∞–∑–º–µ—Ä—ã":
                    key = key.replace(",", ".")
                cache[key] = obj.Ref
            self._ref_cache[catalog_name] = cache

        ref = cache.get(desc)
        if ref is None:
            log(f"[get_ref_by_description] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç '{description}' –≤ –∫–∞—Ç–∞–ª–æ–≥–µ '{catalog_name}'")
        return ref
        
        
        
    def create_production_task(self, order_ref, rows: list[dict]) -> dict:
        doc_manager = getattr(self.connection.Documents, "–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if doc_manager is None:
            log("‚ùå –î–æ–∫—É–º–µ–Ω—Ç '–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}

        if not order_ref:
            log("‚ùå order_ref = None. –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ.")
            return {}

        try:
            # üéØ –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∑–∞–∫–∞–∑–∞
            if hasattr(order_ref, "GetObject"):
                base_doc = order_ref.GetObject()
            elif hasattr(order_ref, "Ref"):
                base_doc = self.connection.GetObject(order_ref.Ref)
            elif isinstance(order_ref, str):
                base_doc = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", order_ref)
                if base_doc is None:
                    log(f"[create_production_task] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ ‚Ññ{order_ref}")
                    return {}
            else:
                log("‚ùå order_ref ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞")
                return {}

            base_doc_ref = base_doc.Ref  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑

            doc = doc_manager.CreateDocument()
            doc.–î–∞—Ç–∞ = datetime.now()
            doc.–ö–æ–Ω–µ—á–Ω–∞—è–î–∞—Ç–∞–ó–∞–¥–∞–Ω–∏—è = datetime.now() + timedelta(days=1)
            doc.–î–æ–∫—É–º–µ–Ω—Ç–û—Å–Ω–æ–≤–∞–Ω–∏–µ = base_doc_ref

            if hasattr(doc, "–ó–∞–∫–∞–∑"):
                try:
                    doc.–ó–∞–∫–∞–∑ = base_doc_ref
                except Exception as e:
                    log(f"[create_production_task] ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ '–ó–∞–∫–∞–∑': {e}")

            if hasattr(doc, "–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"):
                try:
                    doc.–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ = base_doc_ref
                except Exception as e:
                    log(f"[create_production_task] ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ '–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': {e}")

            if hasattr(base_doc, "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è") and hasattr(doc, "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"):
                try:
                    doc.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è = base_doc.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                except Exception as e:
                    log(f"[create_production_task] ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {e}")

            if hasattr(base_doc, "–°–∫–ª–∞–¥") and hasattr(doc, "–°–∫–ª–∞–¥"):
                try:
                    doc.–°–∫–ª–∞–¥ = base_doc.–°–∫–ª–∞–¥
                except Exception as e:
                    log(f"[create_production_task] ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥: {e}")

            doc.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫ = self.get_ref("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ–£—á–∞—Å—Ç–∫–∏", "–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
            operation = rows[0].get("operation", "—Ä–∞–±–æ—Ç–∞ —Å –≤–æ—Å–∫–æ–≤—ã–º–∏ –∏–∑–¥–µ–ª–∏—è–º–∏")
            doc.–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è = self.get_ref("–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏", operation)
            employee_name = rows[0].get("employee", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            doc.–†–∞–±–æ—á–∏–π–¶–µ–Ω—Ç—Ä = self.get_ref("–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞", employee_name)
            doc.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π = self.get_ref("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            doc.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π = "–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ GUI"

            date_start = datetime.now()
            date_end = date_start + timedelta(days=1)

            for row in rows:
                try:
                    item = doc.–ü—Ä–æ–¥—É–∫—Ü–∏—è.Add()
                    item.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("name", ""))
                    item.–†–∞–∑–º–µ—Ä = self.get_ref("–†–∞–∑–º–µ—Ä—ã", row.get("size", ""))
                    item.–ü—Ä–æ–±–∞ = self.get_ref("–ü—Ä–æ–±—ã", row.get("assay", ""))
                    item.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞ = self.get_ref("–¶–≤–µ—Ç–∞–ú–µ—Ç–∞–ª–ª–∞", row.get("color", ""))
                    item.–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫ = self.get_ref("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏–í—Å—Ç–∞–≤–æ–∫", row.get("insert", ""))
                    item.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", row.get("method", ""))
                    item.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = row.get("qty", 0)
                    item.–í–µ—Å = float(row.get("weight", 0) or 0)
                    item.–î–∞—Ç–∞–ù–∞—á–∞–ª–∞ = date_start
                    item.–î–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è = date_end
                    item.–†–∞–±–æ—á–∏–π–¶–µ–Ω—Ç—Ä = self.get_ref("–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞", employee_name)
                    item.–ó–∞–∫–∞–∑ = base_doc_ref
                    item.–ö–æ–Ω–µ—á–Ω–∞—è–ü—Ä–æ–¥—É–∫—Ü–∏—è = item.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
                    item.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ü—Ä–æ–¥—É–∫—Ü–∏–∏ = item.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                    if hasattr(item, "–ê—Ä—Ç–∏–∫—É–ª–ì–ü"):
                        item.–ê—Ä—Ç–∏–∫—É–ª–ì–ü = row.get("article", "")
                except Exception as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ '–ü—Ä–æ–¥—É–∫—Ü–∏—è': {e}")

            for row in rows:
                try:
                    z = doc.–ó–∞–¥–∞–Ω–∏—è–ù–∞–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏.Add()
                    z.–í–µ—Å = float(row.get("weight", 0) or 0)
                    z.–ó–∞–∫–∞–∑ = base_doc_ref
                    z.–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è = self.get_ref("–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏", row.get("operation", operation))
                    z.–†–∞–±–æ—á–∏–π–¶–µ–Ω—Ç—Ä = self.get_ref("–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞", employee_name)
                    z.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("name", ""))
                    z.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", row.get("method", ""))
                    z.–†–∞–∑–º–µ—Ä = self.get_ref("–†–∞–∑–º–µ—Ä—ã", row.get("size", ""))
                    z.–ü—Ä–æ–±–∞ = self.get_ref("–ü—Ä–æ–±—ã", row.get("assay", ""))
                    z.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞ = self.get_ref("–¶–≤–µ—Ç–∞–ú–µ—Ç–∞–ª–ª–∞", row.get("color", ""))
                    z.–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫ = self.get_ref("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏–í—Å—Ç–∞–≤–æ–∫", row.get("insert", ""))
                    z.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = row.get("qty", 0)
                    z.–î–∞—Ç–∞–ù–∞—á–∞–ª–∞ = date_start
                    z.–î–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è = date_end
                    z.–ö–æ–Ω–µ—á–Ω–∞—è–ü—Ä–æ–¥—É–∫—Ü–∏—è = z.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
                    z.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ü—Ä–æ–¥—É–∫—Ü–∏–∏ = z.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                except Exception as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ '–ó–∞–¥–∞–Ω–∏—è–ù–∞–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏': {e}")

            doc.Write()
            log(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ‚Ññ{doc.–ù–æ–º–µ—Ä}")
            return {
                "Ref": doc.Ref,
                "–ù–æ–º–µ—Ä": str(doc.–ù–æ–º–µ—Ä),
                "–î–∞—Ç–∞": str(doc.–î–∞—Ç–∞)
            }

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            return {}
            
    def calculate_batches(self, order_lines: list[dict]) -> list[dict]:
        from collections import defaultdict

        rows_by_batch = defaultdict(lambda: {"qty": 0, "total_w": 0.0})
        for row in order_lines:
            key = (row.get("metal"), row.get("assay"), row.get("color"))
            rows_by_batch[key]["qty"] += row.get("qty", 0)
            rows_by_batch[key]["total_w"] += row.get("weight", 0.0)

        result = []
        for (metal, hallmark, color), data in rows_by_batch.items():
            result.append({
                "batch_barcode": "AUTO",
                "metal": metal,
                "hallmark": hallmark,
                "color": color,
                "qty": data["qty"],
                "total_w": round(data["total_w"], config.WEIGHT_DECIMALS)
            })
        return result      
            
    def get_catalog_ref(self, catalog_name, description):
        try:
            catalog = getattr(self.connection.Catalogs, catalog_name, None)
            if not catalog:
                log(f"–ö–∞—Ç–∞–ª–æ–≥ '{catalog_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            selection = catalog.Select()
            while selection.Next():
                item = selection.GetObject()
                if safe_str(item.Description) == description or safe_str(item) == description:
                    log(f"[{catalog_name}] –ù–∞–π–¥–µ–Ω: {description}")
                    return item.Ref
            log(f"[{catalog_name}] –ù–µ –Ω–∞–π–¥–µ–Ω: {description}")
        except Exception as e:
            log(f"[{catalog_name}] –û—à–∏–±–∫–∞: {e}")
        return None
        
    def get_wax_job_rows(self, num: str) -> list[dict]:
        doc = self._find_doc("–ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è", num)
        rows = []

        for r in doc.–í—ã–¥–∞–Ω–æ:  # <-- –≤–∞–∂–Ω–æ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
            rows.append({
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": self.safe(r, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"),
                "–†–∞–∑–º–µ—Ä": self.safe(r, "–†–∞–∑–º–µ—Ä"),
                "–ü—Ä–æ–±–∞": self.safe(r, "–ü—Ä–æ–±–∞"),
                "–¶–≤–µ—Ç": self.safe(r, "–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞"),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": r.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                "–í–µ—Å": round(float(r.–í–µ—Å), config.WEIGHT_DECIMALS),
                "–ü–∞—Ä—Ç–∏—è": self.safe(r, "–ü–∞—Ä—Ç–∏—è"),
                "–ù–æ–º–µ—Ä —ë–ª–∫–∏": r.–ù–æ–º–µ—Ä–ï–ª–∫–∏ if hasattr(r, "–ù–æ–º–µ—Ä–ï–ª–∫–∏") else "",
                "–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞": r.–°–æ—Å—Ç–∞–≤–ù–∞–±–æ—Ä–∞ if hasattr(r, "–°–æ—Å—Ç–∞–≤–ù–∞–±–æ—Ä–∞") else ""
            })

        return rows   
           
        
    def get_order_lines(self, doc_number: str, date: str | None = None) -> list[dict]:
        doc = self._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", doc_number, date)
        if not doc:
            log(f"‚ùå –ó–∞–∫–∞–∑ ‚Ññ{doc_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []

        rows = []
        for r in doc.–¢–æ–≤–∞—Ä—ã:
            rows.append({
                "name": safe_str(r.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞),
                "size": safe_str(getattr(r, "–†–∞–∑–º–µ—Ä", "")),
                "insert": safe_str(getattr(r, "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫", "")),
                "assay": safe_str(getattr(r, "–ü—Ä–æ–±–∞", "")),
                "color": safe_str(getattr(r, "–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞", "")),
                "method": safe_str(getattr(r, "–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "")),
                "qty": getattr(r, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 0),
                "weight": float(getattr(r, "–í–µ—Å", 0)),  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
                "article": safe_str(getattr(r.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, "–ê—Ä—Ç–∏–∫—É–ª", ""))
            })
        return rows   
        
    def get_task_lines(self, doc_num: str) -> list[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—á–Ω—É—é —á–∞—Å—Ç—å '–ü—Ä–æ–¥—É–∫—Ü–∏—è' –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞–Ω–∏—è"""
        result = []
        doc_manager = getattr(self.connection.Documents, "–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if not doc_manager:
            return result

        selection = doc_manager.Select()
        while selection.Next():
            doc = selection.GetObject()
            if str(doc.Number) == doc_num:
                for row in doc.–ü—Ä–æ–¥—É–∫—Ü–∏—è:
                    result.append({
                        "nomen": self.safe(row, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"),
                        "article": safe_str(getattr(row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, "–ê—Ä—Ç–∏–∫—É–ª", "")),
                        "size": self.safe(row, "–†–∞–∑–º–µ—Ä"),
                        "sample": self.safe(row, "–ü—Ä–æ–±–∞"),
                        "color": self.safe(row, "–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞"),
                        "qty": row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                        "weight": row.–í–µ—Å if hasattr(row, "–í–µ—Å") else ""
                    })
                break
        return result

    # ------------------------------------------------------------------
    def create_wax_job_from_task(self, task_number: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç '–ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è' –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è."""
        task = self._find_document_by_number("–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", task_number)
        if not task:
            log(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ""

        try:
            doc = self.documents.–ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è.CreateDocument()
        except Exception as e:
            log(f"[1C] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è: {e}")
            return ""

        try:
            from datetime import datetime
            doc.Date = datetime.now()
            doc.–î–æ–∫—É–º–µ–Ω—Ç–û—Å–Ω–æ–≤–∞–Ω–∏–µ = task
            doc.–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è = getattr(task, "–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è", None)
            doc.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫ = getattr(task, "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫", None)
            doc.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π = getattr(task, "–†–∞–±–æ—á–∏–π–¶–µ–Ω—Ç—Ä", None)

            for row in task.–ü—Ä–æ–¥—É–∫—Ü–∏—è:
                r = doc.–¢–æ–≤–∞—Ä—ã–í—ã–¥–∞–Ω–æ.Add()
                r.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
                r.–†–∞–∑–º–µ—Ä = row.–†–∞–∑–º–µ—Ä
                r.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                r.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                r.–ü—Ä–æ–±–∞ = row.–ü—Ä–æ–±–∞
                r.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞ = row.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞
                r.–í–µ—Å = row.–í–µ—Å

            doc.Write()
            doc.–ü—Ä–æ–≤–µ—Å—Ç–∏()
            log(f"‚úÖ –°–æ–∑–¥–∞–Ω –ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è ‚Ññ{doc.Number}")
            return str(doc.Number)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ù–∞—Ä—è–¥–∞: {e}")
            return ""
            
    def _get_object_from_ref(self, ref):
        try:
            return self.connection.GetObject(ref)
        except Exception as e:
            log(f"[get_object_from_ref] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
            return None

    def get_object_from_ref(self, ref):
        try:
            obj = ref.GetObject()
            log(f"[get_object_from_ref] ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Å—ã–ª–∫–∏")
            return obj
        except Exception as e:
            log(f"[get_object_from_ref] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
            return None
    # ------------------------------------------------------------------
    def create_multiple_wax_jobs_from_task(self, task_ref, method_to_employee: dict) -> list[str]:
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—é –¥–≤–∞ –Ω–∞—Ä—è–¥–∞: –¥–ª—è 3D –∏ –¥–ª—è —Ä–µ–∑–∏–Ω—ã."""
        result = []

        log(f"[create_jobs] type(task_ref) = {type(task_ref)}")
        log(
            f"[create_jobs] hasattr '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': {hasattr(task_ref, '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')} "
            f"hasattr 'Organization': {hasattr(task_ref, 'Organization')}"
        )

        try:
            organization = getattr(task_ref, "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", None)
            log(f"[create_jobs] –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è: {safe_str(organization)}")
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–¥–∞–Ω–∏—è: {e}")
            return []

        try:
            if isinstance(task_ref, str):                     # –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫—É-Ref
                task = self.connection.GetObject(task_ref)

            elif hasattr(task_ref, "–ü—Ä–æ–¥—É–∫—Ü–∏—è"):             # —É–∂–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                task = task_ref

            elif hasattr(task_ref, "GetObject"):             # DocumentRef ‚Üí –ø–æ–¥–Ω–∏–º–∞–µ–º
                task = task_ref.GetObject()

            else:
                log("[create_jobs] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ")
                return []
        except Exception as e:
            log(f"[create_jobs] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")
            return []

        rows_by_method = defaultdict(list)
        for row in task.–ü—Ä–æ–¥—É–∫—Ü–∏—è:
            name = safe_str(row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞).lower()
            method = "3D –ø–µ—á–∞—Ç—å" if "–¥" in name or "d" in name else "–†–µ–∑–∏–Ω–∞"
            rows_by_method[method].append(row)

        for method, rows in rows_by_method.items():
            try:
                job_ref = self.documents.–ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è.CreateDocument()
                job = job_ref.GetObject() if hasattr(job_ref, "GetObject") else job_ref
                if not hasattr(job, "–ò–∑–¥–µ–ª–∏—è"):
                    log("[create_job] ‚ùå –û–±—ä–µ–∫—Ç –Ω–∞—Ä—è–¥–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏ '–ò–∑–¥–µ–ª–∏—è'")
                    continue
                job.–î–∞—Ç–∞ = datetime.now()

                if organization:
                    job.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è = organization
                wh = getattr(task, "–°–∫–ª–∞–¥", None)
                if wh:
                    job.–°–∫–ª–∞–¥ = wh
                job.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫ = task.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫
                job.–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ = task
                operation_name = "3D –ø–µ—á–∞—Ç—å" if method == "3D –ø–µ—á–∞—Ç—å" else "–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞"
                operation_ref = self.get_ref("–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏", operation_name)
                if not operation_ref:
                    raise ValueError(f"–û–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ '–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏'")
                job.–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è = operation_ref

                master_name = method_to_employee.get(method)
                job.–°–æ—Ç—Ä—É–¥–Ω–∏–∫ = self.get_ref("–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞", master_name)
                job.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π = f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è {method}"

                for r in rows:
                    row = job.–ò–∑–¥–µ–ª–∏—è.Add()
                    row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = r.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
                    row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = r.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    row.–†–∞–∑–º–µ—Ä = r.–†–∞–∑–º–µ—Ä
                    row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = r.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                    row.–ü—Ä–æ–±–∞ = r.–ü—Ä–æ–±–∞
                    row.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞ = r.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞
                    if hasattr(r, "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫"):
                        row.–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫ = r.–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫
                    row.–ó–∞–∫–∞–∑ = r.–ó–∞–∫–∞–∑
                    row.–ö–æ–Ω–µ—á–Ω–∞—è–ü—Ä–æ–¥—É–∫—Ü–∏—è = r.–ö–æ–Ω–µ—á–Ω–∞—è–ü—Ä–æ–¥—É–∫—Ü–∏—è
                    if hasattr(r, "–í–µ—Å"):
                        row.–í–µ—Å = r.–í–µ—Å

                job.Write()
                result.append(str(job.–ù–æ–º–µ—Ä))
                log(f"[create_job] ‚úÖ –ù–∞—Ä—è–¥ –¥–ª—è {method} —Å–æ–∑–¥–∞–Ω: ‚Ññ{job.–ù–æ–º–µ—Ä}")
            except Exception as e:
                log(f"[create_job] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {method}: {e}")
        return result

    def create_wax_jobs_from_task(self, task_ref, master_3d: str, master_form: str) -> list[str]:
        """–°–æ–∑–¥–∞—ë—Ç –¥–≤–∞ –Ω–∞—Ä—è–¥–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É."""
        mapping = {"3D –ø–µ—á–∞—Ç—å": master_3d, "–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞": master_form}
        result: list[str] = []

        try:
            if isinstance(task_ref, str):
                task = self.connection.GetObject(task_ref)
            elif hasattr(task_ref, "–ü—Ä–æ–¥—É–∫—Ü–∏—è"):
                task = task_ref
            elif hasattr(task_ref, "GetObject"):
                task = task_ref.GetObject()
            else:
                log("[create_wax_jobs_from_task] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏")
                return []
        except Exception as exc:
            log(f"[create_wax_jobs_from_task] ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞–Ω–∏—é: {exc}")
            return []

        organization = getattr(task, "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", None)
        wh = getattr(task, "–°–∫–ª–∞–¥", None)

        rows_by_method = {"3D –ø–µ—á–∞—Ç—å": [], "–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞": []}
        for row in task.–ü—Ä–æ–¥—É–∫—Ü–∏—è:
            art = safe_str(getattr(row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, "–ê—Ä—Ç–∏–∫—É–ª", "")).lower()
            method = "3D –ø–µ—á–∞—Ç—å" if "–¥" in art or "d" in art else "–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞"
            rows_by_method[method].append(row)

        for method, rows in rows_by_method.items():
            if not rows:
                continue
            try:
                job_ref = self.documents.–ù–∞—Ä—è–¥–í–æ—Å–∫–æ–≤—ã–µ–ò–∑–¥–µ–ª–∏—è.CreateDocument()
                job = job_ref.GetObject() if hasattr(job_ref, "GetObject") else job_ref
                if not hasattr(job, "–ò–∑–¥–µ–ª–∏—è"):
                    log("[create_wax_jobs_from_task] ‚ùå –û–±—ä–µ–∫—Ç –Ω–∞—Ä—è–¥–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏ '–ò–∑–¥–µ–ª–∏—è'")
                    continue
                job.–î–∞—Ç–∞ = datetime.now()
                if organization:
                    job.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è = organization
                if wh:
                    job.–°–∫–ª–∞–¥ = wh
                job.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫ = task.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫
                job.–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ = task
                operation_name = "3D –ø–µ—á–∞—Ç—å" if method == "3D –ø–µ—á–∞—Ç—å" else "–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞"
                operation_ref = self.get_ref("–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏", operation_name)
                if not operation_ref:
                    raise ValueError(f"–û–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ '–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏–∏'")
                job.–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è = operation_ref
                master_name = mapping.get(method)
                job.–°–æ—Ç—Ä—É–¥–Ω–∏–∫ = self.get_ref("–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞", master_name)
                job.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π = f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è {method}"
                for r in rows:
                    row = job.–ò–∑–¥–µ–ª–∏—è.Add()
                    row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = r.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
                    row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = r.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    row.–†–∞–∑–º–µ—Ä = r.–†–∞–∑–º–µ—Ä
                    row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = r.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                    row.–ü—Ä–æ–±–∞ = r.–ü—Ä–æ–±–∞
                    row.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞ = r.–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞
                    if hasattr(r, "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫"):
                        row.–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫ = r.–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫
                    row.–ó–∞–∫–∞–∑ = r.–ó–∞–∫–∞–∑
                    row.–ö–æ–Ω–µ—á–Ω–∞—è–ü—Ä–æ–¥—É–∫—Ü–∏—è = r.–ö–æ–Ω–µ—á–Ω–∞—è–ü—Ä–æ–¥—É–∫—Ü–∏—è
                    if hasattr(r, "–í–µ—Å"):
                        row.–í–µ—Å = r.–í–µ—Å
                job.Write()
                result.append(str(job.–ù–æ–º–µ—Ä))
                log(f"[create_wax_jobs_from_task] ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–∞—Ä—è–¥ {method}: ‚Ññ{job.–ù–æ–º–µ—Ä}")
            except Exception as exc:
                log(f"[create_wax_jobs_from_task] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {method}: {exc}")
        return result

    def _find_task_by_number(self, number: str):
        doc_manager = getattr(self.connection.Documents, "–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if doc_manager is None:
            log("‚ùå –î–æ–∫—É–º–µ–Ω—Ç '–ó–∞–¥–∞–Ω–∏–µ–ù–∞–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        selection = doc_manager.Select()
        while selection.Next():
            obj = selection.GetObject()
            if str(obj.Number).strip() == number.strip():
                return obj
        return None

    def post_task(self, number: str) -> bool:
        obj = self._find_task_by_number(number)
        if not obj:
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] ‚ùå –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        try:
            obj.–ü—Ä–æ–≤–µ–¥–µ–Ω = True
            obj.Write()
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] ‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è ‚Ññ{number}: {e}")
            return False

    def undo_post_task(self, number: str) -> bool:
        obj = self._find_task_by_number(number)
        if not obj:
            log(f"[–°–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è] ‚ùå –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        try:
            obj.–ü—Ä–æ–≤–µ–¥–µ–Ω = False
            obj.Write()
            log(f"[–°–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è] ‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ‚Ññ{number}: {e}")
            return False

    def mark_task_for_deletion(self, number: str) -> bool:
        obj = self._find_task_by_number(number)
        if not obj:
            log(f"[–ü–æ–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è] ‚ùå –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        try:
            obj.DeletionMark = True
            obj.Write()
            log(f"[–ü–æ–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è] ‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –ø–æ–º–µ—á–µ–Ω–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ‚Ññ{number}: {e}")
            return False

    def unmark_task_deletion(self, number: str) -> bool:
        obj = self._find_task_by_number(number)
        if not obj:
            log(f"[–°–Ω—è—Ç–∏–µ –ø–æ–º–µ—Ç–∫–∏] ‚ùå –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        try:
            obj.DeletionMark = False
            obj.Write()
            log(f"[–°–Ω—è—Ç–∏–µ –ø–æ–º–µ—Ç–∫–∏] ‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø–æ–º–µ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è ‚Ññ{number}: {e}")
            return False

    def delete_task(self, number: str) -> bool:
        obj = self._find_task_by_number(number)
        if not obj:
            log(f"[–£–¥–∞–ª–µ–Ω–∏–µ] ‚ùå –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        try:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω—è—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                obj.–ü—Ä–æ–≤–µ–¥–µ–Ω = False
                obj.Write()

            # –ü–æ–º–µ—Ç–∏—Ç—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–∏–Ω–∞—á–µ 1–° –Ω–µ –¥–∞—Å—Ç —É–¥–∞–ª–∏—Ç—å)
            obj.DeletionMark = True
            obj.Write()

            # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            obj.Delete()
            log(f"[–£–¥–∞–ª–µ–Ω–∏–µ] ‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{number} —É–¥–∞–ª–µ–Ω–æ")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è ‚Ññ{number}: {e}")
            return False
            
            