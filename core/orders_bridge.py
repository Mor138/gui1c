# -*- coding: utf-8 -*-
from __future__ import annotations
import os
import tempfile
from typing import Any
from win32com.client import VARIANT
from pythoncom import VT_BOOL
from .com_bridge import safe_str, log


class OrdersBridge:
    """–ß–∞—Å—Ç—å COM-–º–æ—Å—Ç–∞, –æ—Ç–Ω–æ—Å—è—â–∞—è—Å—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É '–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'."""

    def __init__(self, bridge: 'COM1CBridge'):
        self.bridge = bridge

    def print_order_preview_pdf(self, number: str, date: str | None = None) -> bool:
        obj = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–ü–µ—á–∞—Ç—å] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            form = obj.GetForm("–§–æ—Ä–º–∞–î–æ–∫—É–º–µ–Ω—Ç–∞")
            temp_dir = tempfile.gettempdir()
            pdf_path = os.path.join(temp_dir, f"–ó–∞–∫–∞–∑_{number}.pdf")
            form.PrintFormToFile("–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å —Ñ–æ—Ç–æ", pdf_path)
            if os.path.exists(pdf_path):
                log(f"üìÑ PDF —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {pdf_path}")
                os.startfile(pdf_path)
                return True
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF")
            return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF: {e}")
            return False

    def get_last_order_number(self) -> str:
        doc = getattr(self.bridge.documents, "–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", None)
        if not doc:
            return "00–Æ–ü-000000"
        selection = doc.Select()
        number = "00–Æ–ü-000000"
        while selection.Next():
            try:
                obj = selection.GetObject()
                number = str(obj.Number)
            except Exception:
                continue
        return number

    def get_next_order_number(self) -> str:
        last = self.get_last_order_number()
        try:
            prefix, num = last.split("-")
            next_num = int(num) + 1
            return f"{prefix}-{next_num:06d}"
        except Exception:
            return "00–Æ–ü-000001"

    # -------------------------------------------------------------
    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º "–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
    # -------------------------------------------------------------

    def undo_posting(self, number: str, date: str | None = None) -> bool:
        obj = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[UndoPosting] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.UndoPosting()
            obj.Write()
            log(f"‚úî –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{number}")
            return True
        except Exception as e:
            log(f"‚ùå UndoPosting error: {e}")
            return False

    def delete_order_by_number(self, number: str, date: str | None = None) -> bool:
        obj = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–£–¥–∞–ª–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log("‚ö† –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω, —Å–Ω–∏–º–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ...")
                self.undo_posting(number)
            obj.Delete()
            log("üóë –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            return False

    def post_order(self, number: str, date: str | None = None) -> bool:
        obj = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.–ü—Ä–æ–≤–µ–¥–µ–Ω = True
            obj.Write()
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ –ü—Ä–æ–≤–µ–¥–µ–Ω")
                return True
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ ‚Ññ{number}")
            return False
        except Exception as e:
            log(f"[–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ü—Ä–æ–≤–µ–¥–µ–Ω: {e}")
            return False

    def mark_order_for_deletion(self, number: str, date: str | None = None) -> bool:
        obj = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–ü–æ–º–µ—Ç–∫–∞] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            if getattr(obj, "–ü—Ä–æ–≤–µ–¥–µ–Ω", False):
                log("‚ö† –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω. –°–Ω–∏–º–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–º–µ—Ç–∫–æ–π")
                obj.UndoPosting()
                obj.Write()
            obj.DeletionMark = VARIANT(VT_BOOL, True)
            obj.Write()
            if getattr(obj, "DeletionMark", False):
                log(f"üóë –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –ø–æ–º–µ—á–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
                return True
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–º–µ—Ç–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
            return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–º–µ—Ç–∫–∏: {e}")
            return False

    def unmark_order_deletion(self, number: str, date: str | None = None) -> bool:
        obj = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–°–Ω—è—Ç–∏–µ –ø–æ–º–µ—Ç–∫–∏] –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        try:
            obj.DeletionMark = VARIANT(VT_BOOL, False)
            obj.Write()
            if not getattr(obj, "DeletionMark", True):
                log(f"‚úÖ –ü–æ–º–µ—Ç–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Ññ{number}")
                return True
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø–æ–º–µ—Ç–∫—É")
            return False
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø–æ–º–µ—Ç–∫–∏: {e}")
            return False

    def update_order(self, number: str, fields: dict, items: list, date: str | None = None) -> bool:
        obj = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", number, date)
        if not obj:
            log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –ó–∞–∫–∞–∑ ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        for k, v in fields.items():
            try:
                if k == "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
                    ref = self.bridge.get_ref("–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", v)
                    if ref:
                        setattr(obj, k, ref)
                    continue
                if k in ["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–°–∫–ª–∞–¥"]:
                    ref = self.bridge.get_ref(k + "—ã" if not k.endswith("—Ç") else k + "–∞", v)
                    if ref:
                        setattr(obj, k, ref)
                    continue
                setattr(obj, k, v)
            except Exception as e:
                log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—è {k}: {e}")

        while len(obj.–¢–æ–≤–∞—Ä—ã) > 0:
            obj.–¢–æ–≤–∞—Ä—ã.Delete(0)

        for row in items:
            try:
                new_row = obj.–¢–æ–≤–∞—Ä—ã.Add()
                new_row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.bridge.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"))
                variant = row.get("–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
                if variant and variant != "‚Äî":
                    new_row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.bridge.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", variant)
                size_val = row.get("–†–∞–∑–º–µ—Ä", 0)
                new_row.–†–∞–∑–º–µ—Ä = self.bridge.get_size_ref(size_val)
                new_row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = int(row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1))
                new_row.–í–µ—Å = float(row.get("–í–µ—Å", 0))
                new_row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ = row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "")
            except Exception as e:
                log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

        try:
            obj.Write()
            log(f"‚úî –û–±–Ω–æ–≤–ª—ë–Ω –∑–∞–∫–∞–∑ ‚Ññ{number}")
            return True
        except Exception as e:
            log(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False

    def create_order(self, fields: dict, items: list) -> str:
        doc = self.bridge.documents.–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.CreateDocument()
        catalog_fields_map = {
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
            "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": "–î–æ–≥–æ–≤–æ—Ä—ã–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤",
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "–°–∫–ª–∞–¥": "–°–∫–ª–∞–¥—ã",
        }

        log("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ª—è:")
        for k, v in fields.items():
            try:
                log(f"  -> {k} = {v}")

                if k == "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏":
                    reverse_map = {val: key for key, val in PRODUCTION_STATUS_MAP.items()}
                    if v in reverse_map:
                        v = reverse_map[v]

                    ref = self.bridge.get_ref("–í–∏–¥—ã–°—Ç–∞—Ç—É—Å—ã–ü—Ä–æ–¥—É–∫—Ü–∏–∏", v)
                    log(f"[ref] {k}: {v} => {ref}")
                    if ref:
                        setattr(doc, k, ref)
                        log(f"    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {k} (Ref: {ref})")
                    else:
                        log(f"    ‚ùå {k} '{v}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

                if k in catalog_fields_map:
                    ref = self.bridge.get_ref(catalog_fields_map[k], v)
                    log(f"[ref] {k}: {v} => {ref}")
                    if ref:
                        setattr(doc, k, ref)
                        log(f"    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {k} (Ref: {ref})")
                    else:
                        log(f"    ‚ùå {k} '{v}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

                setattr(doc, k, v)
            except Exception as e:
                log(f"    ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—è {k}: {e}")

        log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∑–∞–∫–∞–∑–∞:")
        for row in items:
            try:
                log(f"  -> —Å—Ç—Ä–æ–∫–∞: {row}")
                new_row = doc.–¢–æ–≤–∞—Ä—ã.Add()
                new_row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ = self.bridge.get_ref("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", row.get("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"))

                variant = row.get("–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
                if variant and variant != "‚Äî":
                    new_row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è = self.bridge.get_ref("–í–∞—Ä–∏–∞–Ω—Ç—ã–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", variant)

                size_val = row.get("–†–∞–∑–º–µ—Ä", 0)
                size_ref = self.bridge.get_size_ref(size_val)
                if size_ref:
                    new_row.–†–∞–∑–º–µ—Ä = size_ref
                else:
                    log(f"    ‚ùå –†–∞–∑–º–µ—Ä '{size_val}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—â–µ–Ω")

                new_row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = int(row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1))
                new_row.–í–µ—Å = float(row.get("–í–µ—Å", 0))
                log(f"    -> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {row.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ')}")
                new_row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ = row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "")

            except Exception as e:
                log(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

        try:
            log("–ü—Ä–æ–≤–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc.Write()
            log(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω. –ù–æ–º–µ—Ä: {doc.Number}")
            return str(doc.Number)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"

    def list_orders(self) -> list[dict]:
        result = []
        orders = self.bridge.connection.Documents.–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.Select()
        while orders.Next():
            doc = orders.GetObject()
            rows = []
            for row in doc.–¢–æ–≤–∞—Ä—ã:
                rows.append({
                    "nomenclature": safe_str(row.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞),
                    "size": safe_str(row.–†–∞–∑–º–µ—Ä),
                    "qty": row.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                    "w": row.–í–µ—Å,
                    "variant": safe_str(row.–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è),
                    "note": row.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ,
                })
            result.append({
                "Ref": doc.Ref,
                "num": doc.–ù–æ–º–µ—Ä,
                "date": str(doc.–î–∞—Ç–∞),
                "org": safe_str(doc.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è),
                "contragent": safe_str(doc.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç),
                "contract": safe_str(doc.–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞),
                "comment": safe_str(doc.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π),
                "prod_status": self.bridge.to_string(doc.–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏),
                "posted": doc.–ü—Ä–æ–≤–µ–¥–µ–Ω,
                "deleted": doc.–ü–æ–º–µ—Ç–∫–∞–£–¥–∞–ª–µ–Ω–∏—è,
                "qty": sum([r["qty"] for r in rows]),
                "weight": sum([r["w"] for r in rows]),
                "rows": rows,
            })
        return result

    def get_order_lines(self, doc_number: str, date: str | None = None) -> list[dict]:
        doc = self.bridge._find_document_by_number("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", doc_number, date)
        if not doc:
            log(f"‚ùå –ó–∞–∫–∞–∑ ‚Ññ{doc_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []

        rows = []
        for r in doc.–¢–æ–≤–∞—Ä—ã:
            rows.append({
                "name": safe_str(r.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞),
                "size": safe_str(getattr(r, "–†–∞–∑–º–µ—Ä", "")),
                "insert": safe_str(getattr(r, "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–í—Å—Ç–∞–≤–æ–∫", "")),
                "assay": safe_str(getattr(r, "–ü—Ä–æ–±–∞", "")),
                "color": safe_str(getattr(r, "–¶–≤–µ—Ç–ú–µ—Ç–∞–ª–ª–∞", "")),
                "method": safe_str(getattr(r, "–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "")),
                "qty": getattr(r, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 0),
                "weight": float(getattr(r, "–í–µ—Å", 0)),
                "article": safe_str(getattr(r.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, "–ê—Ä—Ç–∏–∫—É–ª", "")),
            })
        return rows

