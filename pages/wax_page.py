# wax_page.py ‚Ä¢ v0.8
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from collections import defaultdict
from PyQt5.QtCore    import Qt
from PyQt5.QtGui     import QFont
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QTreeWidget, QTreeWidgetItem,
    QHeaderView, QPushButton, QMessageBox, QTabWidget
)
from logic.production_docs import WAX_JOBS_POOL, ORDERS_POOL, METHOD_LABEL
from core.com_bridge import COM1CBridge

bridge = COM1CBridge("C:\\Users\\Mor\\Desktop\\1C\\proiz")

CSS_TREE = """
QTreeWidget{
  background:#ffffff;
  border:1px solid #d1d5db;
  color:#111827;
  font-size:14px;
}
QTreeWidget::item{
  padding:4px 8px;
  border-bottom:1px solid #e5e7eb;
}

/* –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ */
QTreeView::item:selected{
  background:#3b82f6;
  color:#ffffff;
}

/* hover */
QTreeView::item:hover:!selected{
  background:rgba(59,130,246,0.30);
}

/*  ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–µ–±—Ä—É, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ ‚Üì ‚Äî
QTreeView::item:nth-child(even):!selected{ background:#f9fafb; }
QTreeView::item:nth-child(odd):!selected { background:#ffffff; }
*/
"""

class WaxPage(QWidget):
    def __init__(self):
        super().__init__()
        self._ui()
        self.refresh()
        
    def refresh(self):
        self._fill_jobs_tree()
        self._fill_parties_tree()
        self._fill_tasks_tree()
        self._fill_wax_jobs_tree()    
        self.tree_acts.itemDoubleClicked.connect(self._on_wax_job_double_click)
        self.tree_tasks.itemDoubleClicked.connect(self._on_task_double_click)

    # ------------------------------------------------------------------
    def _ui(self):
        v = QVBoxLayout(self)
        v.setContentsMargins(40, 30, 40, 30)

        hdr = QLabel("–í–æ—Å–∫–æ–≤–∞–Ω–∏–µ / 3-D –ø–µ—á–∞—Ç—å")
        hdr.setFont(QFont("Arial", 22, QFont.Bold))
        v.addWidget(hdr)

        self.tabs = QTabWidget()
        v.addWidget(self.tabs, 1)

        # ----- Tab 1: Jobs and Batches -----
        tab1 = QWidget(); t1 = QVBoxLayout(tab1)

        btn_row = QHBoxLayout()

        btn_create_task = QPushButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        btn_create_task.clicked.connect(self._create_task)

        btn_create_wax_jobs = QPushButton("üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥—ã")
        btn_create_wax_jobs.clicked.connect(self._create_wax_jobs)

        for b in [btn_create_task, btn_create_wax_jobs]:
            btn_row.addWidget(b, alignment=Qt.AlignLeft)

        t1.addLayout(btn_row)

        # ‚Äî –¥–µ—Ä–µ–≤–æ –Ω–∞—Ä—è–¥–æ–≤ ‚Äî
        lab1 = QLabel("–ù–∞—Ä—è–¥—ã (–ø–æ –º–µ—Ç–æ–¥–∞–º)")
        lab1.setFont(QFont("Arial", 16, QFont.Bold))
        t1.addWidget(lab1)

        self.tree_jobs = QTreeWidget()
        self.tree_jobs.setHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª—ã", "–ú–µ—Ç–æ–¥", "Qty", "–í–µ—Å", "–°—Ç–∞—Ç—É—Å", "1–°"
        ])
        self.tree_jobs.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_jobs.setStyleSheet(CSS_TREE)
        t1.addWidget(self.tree_jobs, 1)

        # ‚Äî –¥–µ—Ä–µ–≤–æ –ø–∞—Ä—Ç–∏–π ‚Äî
        lab2 = QLabel("–ü–∞—Ä—Ç–∏–∏ (–º–µ—Ç–∞–ª–ª / –ø—Ä–æ–±–∞ / —Ü–≤–µ—Ç)")
        lab2.setFont(QFont("Arial", 16, QFont.Bold))
        t1.addWidget(lab2)

        self.tree_part = QTreeWidget()
        self.tree_part.setHeaderLabels(["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "Qty", "–í–µ—Å"])
        self.tree_part.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_part.setStyleSheet(CSS_TREE)
        t1.addWidget(self.tree_part, 1)

        self.tabs.addTab(tab1, "–ù–∞—Ä—è–¥—ã")
        
        # ----- Tab 2: –ó–∞–¥–∞–Ω–∏—è -----
        tab2 = QWidget(); t2 = QVBoxLayout(tab2)
        lbl2 = QLabel("–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
        lbl2.setFont(QFont("Arial", 16, QFont.Bold))
        t2.addWidget(lbl2)

        self.tree_tasks = QTreeWidget()
        self.tree_tasks.setHeaderLabels(["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–£—á–∞—Å—Ç–æ–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"])
        self.tree_tasks.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_tasks.setStyleSheet(CSS_TREE)
        t2.addWidget(self.tree_tasks, 1)

        self.tabs.addTab(tab2, "–ó–∞–¥–∞–Ω–∏—è")

        # ----- Tab 3: –ù–∞—Ä—è–¥—ã -----
        tab3 = QWidget(); t3 = QVBoxLayout(tab3)
        lbl3 = QLabel("–ù–∞—Ä—è–¥—ã –Ω–∞ –≤–æ—Å–∫–æ–≤–∫—É")
        lbl3.setFont(QFont("Arial", 16, QFont.Bold))
        t3.addWidget(lbl3)

        self.tree_acts = QTreeWidget()
        self.tree_acts.setHeaderLabels(["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–û—Ä–≥.", "–°–∫–ª–∞–¥", "–£—á–∞—Å—Ç–æ–∫", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–°—Ç–∞—Ç—É—Å", "–û—Å–Ω–æ–≤–∞–Ω–∏–µ"])
        self.tree_acts.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_acts.setStyleSheet(CSS_TREE)
        t3.addWidget(self.tree_acts, 1)

        self.tabs.addTab(tab3, "–ù–∞—Ä—è–¥—ã –∏–∑ 1–°")
        
    def _show_wax_job_detail(self, item):
        from PyQt5.QtWidgets import QDialog, QTableWidget, QTableWidgetItem, QVBoxLayout
        num = item.text(0)
        rows = bridge.get_wax_job_rows(num)

        dlg = QDialog(self)
        dlg.setWindowTitle(f"–°—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ {num}")
        dlg.setMinimumWidth(1000)
        layout = QVBoxLayout(dlg)

        tbl = QTableWidget()
        tbl.setRowCount(len(rows))
        tbl.setColumnCount(9)
        tbl.setHorizontalHeaderLabels([
            "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª-–≤–æ", "–í–µ—Å", "–ü–∞—Ä—Ç–∏—è", "–Å–ª–∫–∞", "–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞"
        ])
        for i, r in enumerate(rows):
            for j, k in enumerate([
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í–µ—Å", "–ü–∞—Ä—Ç–∏—è", "–ù–æ–º–µ—Ä —ë–ª–∫–∏", "–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞"
            ]):
                tbl.setItem(i, j, QTableWidgetItem(str(r.get(k, ""))))

        tbl.resizeColumnsToContents()
        layout.addWidget(tbl)
        dlg.setLayout(layout)
        dlg.exec_()    
        
    def _on_task_double_click(self, item, column):
        num = item.text(0).strip()
        if not num:
            return

        lines = bridge.get_task_lines(num)
        if not lines:
            QMessageBox.information(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–í –∑–∞–¥–∞–Ω–∏–∏ {num} –Ω–µ—Ç —Å—Ç—Ä–æ–∫")
            return

        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QTreeWidget, QTreeWidgetItem

        dlg = QDialog(self)
        dlg.setWindowTitle(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é {num}")
        layout = QVBoxLayout(dlg)

        tree = QTreeWidget()
        tree.setHeaderLabels(["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª-–≤–æ", "–í–µ—Å"])
        for row in lines:
            QTreeWidgetItem(tree, [
                row["nomen"], str(row["size"]), str(row["sample"]),
                str(row["color"]), str(row["qty"]), str(row["weight"])
            ])
        layout.addWidget(tree)
        dlg.resize(700, 400)
        dlg.exec_()    
        
    def _on_wax_job_double_click(self, item, column):
        num = item.text(0).strip()
        if not num:
            return

        lines = bridge.get_wax_job_lines(num)
        if not lines:
            QMessageBox.information(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–í –Ω–∞—Ä—è–¥–µ {num} –Ω–µ—Ç —Å—Ç—Ä–æ–∫")
            return

        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QTreeWidget, QTreeWidgetItem

        dlg = QDialog(self)
        dlg.setWindowTitle(f"–°—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ {num}")
        layout = QVBoxLayout(dlg)

        tree = QTreeWidget()
        tree.setHeaderLabels(["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª-–≤–æ", "–í–µ—Å"])
        for row in lines:
            QTreeWidgetItem(tree, [
                row["nomen"], str(row["size"]), str(row["sample"]),
                str(row["color"]), str(row["qty"]), str(row["weight"])
            ])
        layout.addWidget(tree)
        dlg.resize(700, 400)
        dlg.exec_()    
        
    def _fill_tasks_tree(self):
        self.tree_tasks.clear()
        for t in bridge.list_tasks():
            QTreeWidgetItem(self.tree_tasks, [
                t.get("num", ""),
                t.get("date", ""),
                t.get("employee", ""),
                t.get("tech_op", ""),
                ""
            ])

    def _fill_wax_jobs_tree(self):
        self.tree_acts.clear()
        for t in bridge.list_wax_jobs():
            QTreeWidgetItem(self.tree_acts, [
                t.get("num", ""),
                t.get("date", ""),
                t.get("organization", ""),
                t.get("warehouse", ""),
                t.get("section", ""),
                t.get("employee", ""),
                t.get("tech_op", ""),
                t.get("status", ""),
                t.get("based_on", "")
            ])    
        

    def _create_task(self):
        if not ORDERS_POOL:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
            return

        for o in ORDERS_POOL:
            order = o.get("order", {})
        7f9ne8-codex/–∏—Å–ø—Ä–∞–≤–∏—Ç—å-–æ—à–∏–±–∫—É-keyerror-–≤-wax_page.py
            order_ref = order.get("Ref")
            if not order_ref:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ Ref –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
       
            order_ref = bridge.get_doc_ref("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", order.get("num", ""))
            if not order_ref:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ {order.get('num')} –≤ –±–∞–∑–µ 1–°")
        main
                continue

            method_to_items = defaultdict(list)

            try:
                num = bridge.create_task_from_order(order)
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{num} —Å–æ–∑–¥–∞–Ω–æ")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

            for row in o["order"]["rows"]:
                method = _wax_method(row["article"])
                method_to_items[method].append({
                    "name": row["article"],
                    "qty": row["qty"],
                    "size": row.get("size", ""),
                    "assay": row.get("hallmark", ""),
                    "color": row.get("color", ""),
                    "insert": row.get("insert", "")
                })

            for method, items in method_to_items.items():
                try:
                    result = bridge.create_production_task(order_ref, method, items)
                    QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{result['–ù–æ–º–µ—Ä']} —Å–æ–∑–¥–∞–Ω–æ")
                except Exception as e:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è", str(e))
        
        self.refresh()

    # ------------------------------------------------------------------
    def _create_wax_jobs(self):
        if not ORDERS_POOL:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –ø–∞—Ä—Ç–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤")
            return

        created = 0

        for pack in ORDERS_POOL:
            for batch in pack["docs"].get("batches", []):
                items = []
                for row in pack["order"]["rows"]:
                    if (row["metal"], row["hallmark"], row["color"]) == (
                        batch["metal"], batch["hallmark"], batch["color"]
                    ):
                        items.append({
                            "name": row["article"],
                            "qty": row["qty"],
                            "size": row.get("size", ""),
                            "assay": row.get("hallmark", ""),
                            "color": row.get("color", ""),
                            "insert": row.get("insert", ""),
                            "batch": batch["batch_barcode"]
                        })

                method = _wax_method(items[0]["name"]) if items else "3d"

                # –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –º–µ—Ç–æ–¥—É
                task_ref = bridge.find_production_task_ref_by_method(method)
                if not task_ref:
                    QMessageBox.warning(self, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ", f"–ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–µ—Ç–æ–¥–∞ {method}")
                    continue

                try:
                    result = bridge.create_wax_order_from_task(task_ref, items)
                    created += 1
                except Exception as e:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–∞", str(e))

        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°–æ–∑–¥–∞–Ω–æ {created} –Ω–∞—Ä—è–¥–æ–≤")
        self.refresh()

    # ------------------------------------------------------------------
    def _sync_job(self):
        code = self._selected_job_code()
        if not code:
            QMessageBox.warning(self, "–ù–∞—Ä—è–¥", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∞—Ä—è–¥")

        task_num, ok = QInputDialog.getText(self, "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—è–¥–æ–≤", "–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:")
        if not ok or not task_num:

            return
        try:
            count = bridge.create_multiple_wax_jobs_from_task(task_num)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°–æ–∑–¥–∞–Ω–æ {count} –Ω–∞—Ä—è–¥–æ–≤")
            self.refresh()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))


    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ù–∞—Ä—è–¥—ã¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_jobs_tree(self):
        self.tree_jobs.clear()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ wax_job (–æ–¥–∏–Ω –Ω–∞—Ä—è–¥ = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)
        grouped = defaultdict(list)
        for job in WAX_JOBS_POOL:
            grouped[job["wax_job"]].append(job)

        for wax_code, rows in grouped.items():
            j0 = rows[0]  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            method_label = METHOD_LABEL.get(j0["method"], j0["method"])
            total_qty = sum(r["qty"] for r in rows)
            total_weight = sum(r["weight"] for r in rows)

            # –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî —Å–∞–º –Ω–∞—Ä—è–¥
            root = QTreeWidgetItem(self.tree_jobs, [
                f"{method_label} ({wax_code})",
                method_label,
                str(total_qty),
                f"{total_weight:.3f}",
                j0.get("status", ""),
                '‚úÖ' if j0.get('sync_doc_num') else ''
            ])
            root.setExpanded(True)

            # –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            for r in rows:
                QTreeWidgetItem(root, [
                    r["articles"],
                    "",
                    str(r["qty"]),
                    f"{r.get('weight', 0.0):.3f}",
                    "", ""
                ])

    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ü–∞—Ä—Ç–∏–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_parties_tree(self):
        self.tree_part.clear()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏—è—Ö –±–µ—Ä—ë–º –∏–∑ ORDERS_POOL
        for pack in ORDERS_POOL:
            for b in pack["docs"].get("batches", []):
                root = QTreeWidgetItem(self.tree_part, [
                    f"–ü–∞—Ä—Ç–∏—è {b['batch_barcode']}  ({b['metal']} {b['hallmark']} {b['color']})",
                    str(b["qty"]), f"{b['total_w']:.3f}"
                ])
                root.setExpanded(True)

                agg = defaultdict(lambda: dict(qty=0, weight=0))
                for row in pack["order"]["rows"]:
                    if (row["metal"], row["hallmark"], row["color"]) == (
                        b["metal"], b["hallmark"], b["color"]):
                        k = (row["article"], row["size"])
                        agg[k]["qty"] += row["qty"]
                        agg[k]["weight"] += row["weight"]

                for (art, size), d in agg.items():
                    QTreeWidgetItem(root, [
                        f"{art}  (—Ä-—Ä {size})",
                        str(d["qty"]), f"{d['weight']:.3f}"
                    ])



# ----------------------------------------------------------------------
def _wax_method(article: str) -> str:
    art = str(article).lower()
    if "–¥" in art or "d" in art:
        return "3D –ø–µ—á–∞—Ç—å"
    return "–†–µ–∑–∏–Ω–∞"
