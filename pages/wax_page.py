# wax_page.py ‚Ä¢ v0.8
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from collections import defaultdict
from PyQt5.QtCore    import Qt
from PyQt5.QtGui     import QFont
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QTreeWidget, QTreeWidgetItem,
    QHeaderView, QPushButton, QMessageBox, QTabWidget, QInputDialog
)
from logic.production_docs import (
    WAX_JOBS_POOL,
    ORDERS_POOL,
    METHOD_LABEL,
    process_new_order,
)
from pages.orders_page import parse_variant
from core.com_bridge import log
from config import BRIDGE as bridge, CSS_TREE

class WaxPage(QWidget):
    def __init__(self):
        super().__init__()
        self.last_created_task_ref = None
        self.jobs_page = None
        self._ui()
        self.refresh()

    def set_jobs_page(self, jobs_page):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Ä—è–¥–æ–≤."""
        self.jobs_page = jobs_page

    def refresh(self):
        self._fill_jobs_tree()
        self._fill_parties_tree()
        self._fill_tasks_tree()
        self._fill_wax_jobs_tree()

    # ------------------------------------------------------------------
    def _ui(self):
        v = QVBoxLayout(self)
        v.setContentsMargins(40, 30, 40, 30)

        hdr = QLabel("–í–æ—Å–∫–æ–≤–∞–Ω–∏–µ / 3-D –ø–µ—á–∞—Ç—å")
        hdr.setFont(QFont("Arial", 22, QFont.Bold))
        v.addWidget(hdr)

        self.tabs = QTabWidget()
        v.addWidget(self.tabs, 1)

        # ----- Tab: –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ -----
        self.tab_tasks = QWidget()
        t_main = QVBoxLayout(self.tab_tasks)
        tabs_tasks = QTabWidget()
        t_main.addWidget(tabs_tasks, 1)

        tab_tasks_list = QWidget(); t1 = QVBoxLayout(tab_tasks_list)
        lbl2 = QLabel("–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
        lbl2.setFont(QFont("Arial", 16, QFont.Bold))
        t1.addWidget(lbl2)

        self.tree_tasks = QTreeWidget()
        self.tree_tasks.setHeaderLabels([
            "‚úì", "–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–£—á–∞—Å—Ç–æ–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
        ])
        self.tree_tasks.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_tasks.setStyleSheet(CSS_TREE)
        t1.addWidget(self.tree_tasks, 1)

        btn_bar = QHBoxLayout()

        btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        btn_post = QPushButton("‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ")
        btn_unpost = QPushButton("‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ")
        btn_mark = QPushButton("üè∑ –ü–æ–º–µ—Ç–∏—Ç—å")
        btn_unmark = QPushButton("üö´ –°–Ω—è—Ç—å –ø–æ–º–µ—Ç–∫—É")
        btn_delete = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")

        btn_bar.addWidget(btn_refresh)
        btn_bar.addWidget(btn_post)
        btn_bar.addWidget(btn_unpost)
        btn_bar.addWidget(btn_mark)
        btn_bar.addWidget(btn_unmark)
        btn_bar.addWidget(btn_delete)

        btn_refresh.clicked.connect(self._fill_tasks_tree)
        btn_post.clicked.connect(self._post_selected_tasks)
        btn_unpost.clicked.connect(self._unpost_selected_tasks)
        btn_mark.clicked.connect(self._mark_selected_tasks)
        btn_unmark.clicked.connect(self._unmark_selected_tasks)
        btn_delete.clicked.connect(self._delete_selected_tasks)

        t1.addLayout(btn_bar)

        tabs_tasks.addTab(tab_tasks_list, "–ó–∞–¥–∞–Ω–∏—è")
        self.tabs.addTab(self.tab_tasks, "–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")

        # ----- Tab: –ù–∞—Ä—è–¥—ã –Ω–∞ –≤–æ—Å–∫–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è -----
        self.tab_wax = QWidget()
        t_wax = QVBoxLayout(self.tab_wax)
        tabs_wax = QTabWidget()
        t_wax.addWidget(tabs_wax, 1)

        tab_wax_list = QWidget(); t2 = QVBoxLayout(tab_wax_list)
        lbl3 = QLabel("–ù–∞—Ä—è–¥—ã –Ω–∞ –≤–æ—Å–∫–æ–≤–∫—É")
        lbl3.setFont(QFont("Arial", 16, QFont.Bold))
        t2.addWidget(lbl3)

        self.tree_acts = QTreeWidget()
        self.tree_acts.setHeaderLabels([
            "–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–û—Ä–≥.", "–°–∫–ª–∞–¥", "–£—á–∞—Å—Ç–æ–∫", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
            "–û–ø–µ—Ä–∞—Ü–∏—è", "–°—Ç–∞—Ç—É—Å", "–û—Å–Ω–æ–≤–∞–Ω–∏–µ"
        ])
        self.tree_acts.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_acts.setStyleSheet(CSS_TREE)
        t2.addWidget(self.tree_acts, 1)

        tabs_wax.addTab(tab_wax_list, "–ù–∞—Ä—è–¥—ã")
        self.tabs.addTab(self.tab_wax, "–ù–∞—Ä—è–¥—ã –Ω–∞ –≤–æ—Å–∫–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è")

        # ----- Tab: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–π -----
        self.tab_batches = QWidget()
        t_batches = QVBoxLayout(self.tab_batches)

        btn_row = QHBoxLayout()

        btn_create_task = QPushButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        btn_create_task.clicked.connect(self._create_task)

        btn_create_wax_jobs = QPushButton("üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥—ã")
        btn_create_wax_jobs.clicked.connect(self._create_wax_jobs)

        from PyQt5.QtWidgets import QComboBox

        # –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        self.combo_employee = QComboBox()
        self.combo_employee.setMinimumWidth(200)
        self.combo_employee.addItem("‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ ‚Äî")

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ 1–°
        for item in bridge.list_catalog_items("–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞", limit=100):
            name = item.get("Description", "")
            if name:
                self.combo_employee.addItem(name)

        btn_row.addWidget(self.combo_employee)

        for b in [btn_create_task, btn_create_wax_jobs]:
            btn_row.addWidget(b, alignment=Qt.AlignLeft)

        # -------- –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –Ω–∞—Ä—è–¥–æ–≤ --------
        label = QLabel("‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤")
        label.setStyleSheet("font-weight: bold; padding: 6px")

        self.combo_3d_master = QComboBox()
        self.combo_resin_master = QComboBox()

        employees = bridge.list_catalog_items("–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞", limit=100)
        names = [e.get("Description", "") for e in employees]
        self.combo_3d_master.addItems(names)
        self.combo_resin_master.addItems(names)

        h = QHBoxLayout()
        h.addWidget(QLabel("3D:"))
        h.addWidget(self.combo_3d_master)
        h.addWidget(QLabel("–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞:"))
        h.addWidget(self.combo_resin_master)

        t_batches.addWidget(label)
        t_batches.addLayout(h)
        t_batches.addLayout(btn_row)

        tabs_batches = QTabWidget()
        t_batches.addWidget(tabs_batches, 1)

        tab_jobs = QWidget(); j = QVBoxLayout(tab_jobs)
        lab1 = QLabel("–ù–∞—Ä—è–¥—ã (–ø–æ –º–µ—Ç–æ–¥–∞–º)")
        lab1.setFont(QFont("Arial", 16, QFont.Bold))
        j.addWidget(lab1)

        self.tree_jobs = QTreeWidget()
        self.tree_jobs.setHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª—ã", "–ú–µ—Ç–æ–¥", "Qty", "–í–µ—Å", "–°—Ç–∞—Ç—É—Å", "1–°"
        ])
        self.tree_jobs.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_jobs.setStyleSheet(CSS_TREE)
        j.addWidget(self.tree_jobs, 1)

        tab_parts = QWidget(); p = QVBoxLayout(tab_parts)
        lab2 = QLabel("–ü–∞—Ä—Ç–∏–∏ (–º–µ—Ç–∞–ª–ª / –ø—Ä–æ–±–∞ / —Ü–≤–µ—Ç)")
        lab2.setFont(QFont("Arial", 16, QFont.Bold))
        p.addWidget(lab2)

        self.tree_part = QTreeWidget()
        self.tree_part.setHeaderLabels(["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "Qty", "–í–µ—Å"])
        self.tree_part.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_part.setStyleSheet(CSS_TREE)
        p.addWidget(self.tree_part, 1)

        tabs_batches.addTab(tab_jobs, "–ù–∞—Ä—è–¥—ã")
        tabs_batches.addTab(tab_parts, "–ü–∞—Ä—Ç–∏–∏")

        self.tabs.addTab(self.tab_batches, "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–π")

        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.tree_tasks.itemDoubleClicked.connect(self._on_task_double_click)
        self.tree_acts.itemDoubleClicked.connect(self._on_wax_job_double_click)

    def _show_wax_job_detail(self, item):
        from PyQt5.QtWidgets import QDialog, QTableWidget, QTableWidgetItem, QVBoxLayout
        num = item.text(0)
        rows = bridge.get_wax_job_rows(num)

        dlg = QDialog(self)
        dlg.setWindowTitle(f"–°—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ {num}")
        dlg.setMinimumWidth(1000)
        layout = QVBoxLayout(dlg)

        tbl = QTableWidget()
        tbl.setRowCount(len(rows))
        tbl.setColumnCount(9)
        tbl.setHorizontalHeaderLabels([
            "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª-–≤–æ", "–í–µ—Å", "–ü–∞—Ä—Ç–∏—è", "–Å–ª–∫–∞", "–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞"
        ])
        for i, r in enumerate(rows):
            for j, k in enumerate([
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í–µ—Å", "–ü–∞—Ä—Ç–∏—è", "–ù–æ–º–µ—Ä —ë–ª–∫–∏", "–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞"
            ]):
                tbl.setItem(i, j, QTableWidgetItem(str(r.get(k, ""))))

        tbl.resizeColumnsToContents()
        layout.addWidget(tbl)
        dlg.setLayout(layout)
        dlg.exec_()
        
    def _get_checked_tasks(self):
        result = []
        for i in range(self.tree_tasks.topLevelItemCount()):
            item = self.tree_tasks.topLevelItem(i)
            if item.checkState(0) == Qt.Checked:
                result.append(item.text(1))  # –ù–æ–º–µ—Ä
        print("[DEBUG] –û—Ç–º–µ—á–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è:", result)
        return result
    
    def _post_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            bridge.post_task(num)
        self._fill_tasks_tree()

    def _unpost_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            bridge.undo_post_task(num)
        self._fill_tasks_tree()

    def _mark_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            bridge.mark_task_for_deletion(num)
        self._fill_tasks_tree()

    def _unmark_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            bridge.unmark_task_deletion(num)
        self._fill_tasks_tree()

    def _delete_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            bridge.delete_task(num)
        self._fill_tasks_tree() 

    def populate_jobs_tree(self, doc_num: str):
        self.tree_jobs.clear()
        self.tree_part.clear()

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ –Ω–∞—Ä—è–¥
            rows = bridge.get_wax_job_rows(doc_num)
            if rows:
                log(f"[populate_jobs_tree] –ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ ‚Ññ{doc_num}: {len(rows)}")
                self.refresh()
                return
        except Exception as e:
            log(f"[populate_jobs_tree] –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∞–∫ –Ω–∞—Ä—è–¥: {e}")

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            task = bridge._find_task_by_number(doc_num)
            if task and getattr(task, "–î–æ–∫—É–º–µ–Ω—Ç–û—Å–Ω–æ–≤–∞–Ω–∏–µ", None):
                base_ref = getattr(task, "–î–æ–∫—É–º–µ–Ω—Ç–û—Å–Ω–æ–≤–∞–Ω–∏–µ")
                base_obj = bridge.get_object_from_ref(base_ref)
                order_num = base_obj.–ù–æ–º–µ—Ä
                log(f"[populate_jobs_tree] –ó–∞–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–∫–∞–∑–æ–º ‚Ññ{order_num}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                order_lines = bridge.get_order_lines(order_num)
                order_json_rows = []
                for r in order_lines:
                    metal, hallmark, color = parse_variant(r.get("method", ""))
                    order_json_rows.append(
                        {
                            "article": r.get("article", ""),
                            "size": r.get("size", 0),
                            "qty": r.get("qty", 0),
                            "weight": r.get("weight", 0),
                            "metal": metal,
                            "hallmark": hallmark,
                            "color": color,
                        }
                    )

                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º ORDERS_POOL –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                ORDERS_POOL.clear()
                process_new_order({"number": order_num, "rows": order_json_rows})
                log(
                    f"[ORDERS_POOL] –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –∏ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_num}"
                )

                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
                self.refresh()
            else:
                log("[populate_jobs_tree] –ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è")
        except Exception as ee:
            log(f"[populate_jobs_tree] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –∑–∞–¥–∞–Ω–∏—è: {ee}")

    def _on_task_double_click(self, item, column):
        num = item.text(1).strip() if item.columnCount() > 1 else item.text(0).strip()
        if not num:
            return

        task_ref = bridge._find_task_by_number(num)   # <-- —ç—Ç–æ —Å—Å—ã–ª–∫–∞ (Ref)
        self.last_created_task_ref = task_ref

        index = self.tabs.indexOf(self.tab_batches)
        self.tabs.setCurrentIndex(index)
        self.populate_jobs_tree(num)                  # <-- –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
        log(f"[UI] –í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{num}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–∞—Ä—è–¥–æ–≤.")

    def load_task_data(self, task_obj):
        if not task_obj:
            log("[UI] ‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        self.last_created_task_ref = task_obj
        self._fill_jobs_table_from_task(task_obj)
        log(f"[UI] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_obj.–ù–æ–º–µ—Ä}")

    def _fill_jobs_table_from_task(self, task_obj):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Ä—è–¥–æ–≤ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
        lines = bridge.get_task_lines(getattr(task_obj, "–ù–æ–º–µ—Ä", ""))
        log(f"[UI] –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–∫ –∑–∞–¥–∞–Ω–∏—è: {len(lines)}")

    def _on_wax_job_double_click(self, item, column):
        num = item.text(0).strip()
        if not num:
            return

        lines = bridge.get_wax_job_lines(num)
        if not lines:
            QMessageBox.information(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–í –Ω–∞—Ä—è–¥–µ {num} –Ω–µ—Ç —Å—Ç—Ä–æ–∫")
            return

        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QTreeWidget, QTreeWidgetItem

        dlg = QDialog(self)
        dlg.setWindowTitle(f"–°—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ {num}")
        layout = QVBoxLayout(dlg)

        tree = QTreeWidget()
        tree.setHeaderLabels(["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª-–≤–æ", "–í–µ—Å"])
        for row in lines:
            QTreeWidgetItem(tree, [
                row["nomen"], str(row["size"]), str(row["sample"]),
                str(row["color"]), str(row["qty"]), str(row["weight"])
            ])
        layout.addWidget(tree)
        dlg.resize(700, 400)
        dlg.exec_()

    def _fill_tasks_tree(self):
        self.tree_tasks.clear()
        for t in bridge.list_tasks():
            status = ""
            if t.get("posted"):
                status = "‚úÖ"
            elif t.get("deleted"):
                status = "üóë"
            item = QTreeWidgetItem([
                status,
                t.get("num", ""),
                t.get("date", ""),
                t.get("section", ""),
                t.get("tech_op", ""),
                t.get("employee", "")
            ])
            item.setCheckState(0, Qt.Unchecked)
            from PyQt5.QtGui import QBrush, QColor

            if t.get("deleted"):
                for i in range(item.columnCount()):
                    item.setBackground(i, QBrush(QColor("#f87171")))  # –∫—Ä–∞—Å–Ω—ã–π
            elif t.get("posted"):
                for i in range(item.columnCount()):
                    item.setBackground(i, QBrush(QColor("#bbf7d0")))  # –∑–µ–ª—ë–Ω—ã–π
            self.tree_tasks.addTopLevelItem(item)

    def _fill_wax_jobs_tree(self):
        self.tree_acts.clear()
        for t in bridge.list_wax_jobs():
            QTreeWidgetItem(self.tree_acts, [
                t.get("num", ""),
                t.get("date", ""),
                t.get("organization", ""),
                t.get("warehouse", ""),
                t.get("section", ""),
                t.get("employee", ""),
                t.get("tech_op", ""),
                t.get("status", ""),
                t.get("based_on", "")
            ])


    def _create_task(self):
        if not ORDERS_POOL:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
            return

        for o in ORDERS_POOL:
            docs = o.get("docs", {})
            if docs.get("sync_task_num"):
                continue  # ‚õîÔ∏è —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ

            order_num = o.get("number") or docs.get("order_code")
            if not order_num:
                log("‚ùå –£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞")
                continue

            order_ref = bridge.get_doc_ref("–ó–∞–∫–∞–∑–í–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", order_num)
            if not order_ref:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{order_num}")
                continue

            rows = bridge.get_order_lines(order_num)
            # üîÑ –æ–±–æ–≥–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞
            for row in rows:
                # –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –ø—Ä–æ–±—É –∏ —Ü–≤–µ—Ç –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                variant = row.get("method", "")
                if "585" in variant:
                    row["assay"] = "585"
                elif "925" in variant:
                    row["assay"] = "925"
                else:
                    row["assay"] = ""

                if "–ö—Ä–∞—Å–Ω—ã–π" in variant:
                    row["color"] = "–ö—Ä–∞—Å–Ω—ã–π"
                elif "–ñ–µ–ª—Ç—ã–π" in variant:
                    row["color"] = "–ñ–µ–ª—Ç—ã–π"
                elif "—Å–µ—Ä–µ–±—Ä–æ" in variant.lower():
                    row["color"] = "–°–≤–µ—Ç–ª—ã–π"
                else:
                    row["color"] = ""

                if not row.get("weight"):
                    # –°—Ç–∞–≤–∏–º None –≤–º–µ—Å—Ç–æ 0, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ 1
                    row["weight"] = None

                # –ú–∞—Å—Ç–µ—Ä
                employee_name = self.combo_employee.currentText()
                if employee_name and employee_name != "‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ ‚Äî":
                    row["employee"] = employee_name
                else:
                    QMessageBox.warning(self, "–ú–∞—Å—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞")
                    return
            # –ø–µ—Ä–µ–¥–∞—ë–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            employee_name = self.combo_employee.currentText()
            if employee_name and employee_name != "‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ ‚Äî":
                for r in rows:
                    r["employee"] = employee_name
            else:
                QMessageBox.warning(self, "–ú–∞—Å—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ (—Ä–∞–±–æ—á–∏–π —Ü–µ–Ω—Ç—Ä)")
                return
            if not rows:
                log(f"‚ùå –í –∑–∞–∫–∞–∑–µ ‚Ññ{order_num} –Ω–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è")
                continue

            try:
                result = bridge.create_production_task(order_ref, rows)
                docs["sync_task_num"] = result.get("–ù–æ–º–µ—Ä")  # ‚úÖ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
                ref = result.get("Ref")
                self.last_created_task_ref = bridge.get_object_from_ref(ref) if ref else None
                log(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{result.get('–ù–æ–º–µ—Ä', '?')}")
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
                
            if not docs.get("batches"):
                from collections import defaultdict
                rows_by_batch = defaultdict(lambda: {"qty": 0, "total_w": 0.0})
                for row in rows:
                    key = (row["metal"], row["assay"], row["color"])
                    rows_by_batch[key]["qty"] += row["qty"]
                    rows_by_batch[key]["total_w"] += row["weight"]

                docs["batches"] = []
                for (metal, hallmark, color), data in rows_by_batch.items():
                    docs["batches"].append({
                        "batch_barcode": "AUTO",  # –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —à—Ç—Ä–∏—Ö–∫–æ–¥
                        "metal": metal,
                        "hallmark": hallmark,
                        "color": color,
                        "qty": data["qty"],
                        "total_w": round(data["total_w"], 3)
                    })    

    # ------------------------------------------------------------------
    def _create_wax_jobs(self):
        # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ORDERS_POOL –º–µ—à–∞–ª–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Ä—è–¥—ã –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        # –∑–∞–¥–∞–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –µ—ë —É–±—Ä–∞–ª–∏.

        master_3d = self.combo_3d_master.currentText().strip()
        master_resin = self.combo_resin_master.currentText().strip()

        if not master_3d or not master_resin:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤.")
            return


        if not self.last_created_task_ref:

            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤.")
            return

        print("[DEBUG] last_created_task_ref =", self.last_created_task_ref)
        result = bridge.create_multiple_wax_jobs_from_task(
            self.last_created_task_ref,
            {"3D –ø–µ—á–∞—Ç—å": master_3d, "–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞": master_resin}
        )

        if result:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Ä—è–¥—ã: " + ", ".join(result))
            self.refresh()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥—ã.")

    # ------------------------------------------------------------------
    def _sync_job(self):
        code = self._selected_job_code()
        if not code:
            QMessageBox.warning(self, "–ù–∞—Ä—è–¥", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∞—Ä—è–¥")

        task_num, ok = QInputDialog.getText(self, "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—è–¥–æ–≤", "–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:")
        if not ok or not task_num:

            return
        try:
            count = bridge.create_multiple_wax_jobs_from_task(task_num)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°–æ–∑–¥–∞–Ω–æ {count} –Ω–∞—Ä—è–¥–æ–≤")
            self.refresh()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))


    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ù–∞—Ä—è–¥—ã¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_jobs_tree(self):
        self.tree_jobs.clear()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ wax_job (–æ–¥–∏–Ω –Ω–∞—Ä—è–¥ = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)
        grouped = defaultdict(list)
        for job in WAX_JOBS_POOL:
            grouped[job["wax_job"]].append(job)

        for wax_code, rows in grouped.items():
            j0 = rows[0]  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            method_label = METHOD_LABEL.get(j0["method"], j0["method"])
            total_qty = sum(r["qty"] for r in rows)
            total_weight = sum(r["weight"] for r in rows)

            # –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî —Å–∞–º –Ω–∞—Ä—è–¥
            root = QTreeWidgetItem(self.tree_jobs, [
                f"{method_label} ({wax_code})",
                method_label,
                str(total_qty),
                f"{total_weight:.3f}",
                j0.get("status", ""),
                '‚úÖ' if j0.get('sync_doc_num') else ''
            ])
            root.setExpanded(True)

            # –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            for r in rows:
                QTreeWidgetItem(root, [
                    r["articles"],
                    "",
                    str(r["qty"]),
                    f"{r.get('weight', 0.0):.3f}",
                    "", ""
                ])

    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ü–∞—Ä—Ç–∏–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_parties_tree(self):
        self.tree_part.clear()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏—è—Ö –±–µ—Ä—ë–º –∏–∑ ORDERS_POOL
        for pack in ORDERS_POOL:
            for b in pack["docs"].get("batches", []):
                root = QTreeWidgetItem(self.tree_part, [
                    f"–ü–∞—Ä—Ç–∏—è {b['batch_barcode']}  ({b['metal']} {b['hallmark']} {b['color']})",
                    str(b["qty"]), f"{b['total_w']:.3f}"
                ])
                root.setExpanded(True)

                agg = defaultdict(lambda: dict(qty=0, weight=0))
                for row in pack["order"]["rows"]:
                    if (row["metal"], row["hallmark"], row["color"]) == (
                        b["metal"], b["hallmark"], b["color"]):
                        k = (row["article"], row["size"])
                        agg[k]["qty"] += row["qty"]
                        agg[k]["weight"] += row["weight"]

                for (art, size), d in agg.items():
                    QTreeWidgetItem(root, [
                        f"{art}  (—Ä-—Ä {size})",
                        str(d["qty"]), f"{d['weight']:.3f}"
                    ])

