# wax_page.py ‚Ä¢ v0.8
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from collections import defaultdict
from PyQt5.QtCore    import Qt
from PyQt5.QtGui     import QFont
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QTreeWidget, QTreeWidgetItem,
    QHeaderView, QPushButton, QMessageBox, QTabWidget
)
from logic.production_docs import WAX_JOBS_POOL, ORDERS_POOL, METHOD_LABEL
from core.com_bridge import COM1CBridge

bridge = COM1CBridge("C:\\Users\\Mor\\Desktop\\1C\\proiz")

CSS_TREE = """
QTreeWidget{
  background:#ffffff;
  border:1px solid #d1d5db;
  color:#111827;
  font-size:14px;
}
QTreeWidget::item{
  padding:4px 8px;
  border-bottom:1px solid #e5e7eb;
}

/* –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ */
QTreeView::item:selected{
  background:#3b82f6;
  color:#ffffff;
}

/* hover */
QTreeView::item:hover:!selected{
  background:rgba(59,130,246,0.30);
}

/*  ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–µ–±—Ä—É, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ ‚Üì ‚Äî
QTreeView::item:nth-child(even):!selected{ background:#f9fafb; }
QTreeView::item:nth-child(odd):!selected { background:#ffffff; }
*/
"""

class WaxPage(QWidget):
    def __init__(self):
        super().__init__()
        self._ui()
        self.refresh()
        
    def refresh(self):
        self._fill_jobs_tree()
        self._fill_parties_tree()
        self._fill_tasks_tree()
        self._fill_wax_jobs_tree()    

    # ------------------------------------------------------------------
    def _ui(self):
        v = QVBoxLayout(self)
        v.setContentsMargins(40, 30, 40, 30)

        hdr = QLabel("–í–æ—Å–∫–æ–≤–∞–Ω–∏–µ / 3-D –ø–µ—á–∞—Ç—å")
        hdr.setFont(QFont("Arial", 22, QFont.Bold))
        v.addWidget(hdr)

        self.tabs = QTabWidget()
        v.addWidget(self.tabs, 1)

        # ----- Tab 1: Jobs and Batches -----
        tab1 = QWidget(); t1 = QVBoxLayout(tab1)

        btn_row = QHBoxLayout()

        btn_create_task = QPushButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        btn_create_task.clicked.connect(self._create_task)

        btn_create_wax_jobs = QPushButton("üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥—ã")
        btn_create_wax_jobs.clicked.connect(self._create_wax_jobs)

        for b in [btn_create_task, btn_create_wax_jobs]:
            btn_row.addWidget(b, alignment=Qt.AlignLeft)

        t1.addLayout(btn_row)

        # ‚Äî –¥–µ—Ä–µ–≤–æ –Ω–∞—Ä—è–¥–æ–≤ ‚Äî
        lab1 = QLabel("–ù–∞—Ä—è–¥—ã (–ø–æ –º–µ—Ç–æ–¥–∞–º)")
        lab1.setFont(QFont("Arial", 16, QFont.Bold))
        t1.addWidget(lab1)

        self.tree_jobs = QTreeWidget()
        self.tree_jobs.setHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª—ã", "–ú–µ—Ç–æ–¥", "Qty", "–í–µ—Å", "–°—Ç–∞—Ç—É—Å", "1–°"
        ])
        self.tree_jobs.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_jobs.setStyleSheet(CSS_TREE)
        t1.addWidget(self.tree_jobs, 1)

        # ‚Äî –¥–µ—Ä–µ–≤–æ –ø–∞—Ä—Ç–∏–π ‚Äî
        lab2 = QLabel("–ü–∞—Ä—Ç–∏–∏ (–º–µ—Ç–∞–ª–ª / –ø—Ä–æ–±–∞ / —Ü–≤–µ—Ç)")
        lab2.setFont(QFont("Arial", 16, QFont.Bold))
        t1.addWidget(lab2)

        self.tree_part = QTreeWidget()
        self.tree_part.setHeaderLabels(["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "Qty", "–í–µ—Å"])
        self.tree_part.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_part.setStyleSheet(CSS_TREE)
        t1.addWidget(self.tree_part, 1)

        self.tabs.addTab(tab1, "–ù–∞—Ä—è–¥—ã")
        
        # ----- Tab 2: –ó–∞–¥–∞–Ω–∏—è -----
        tab2 = QWidget(); t2 = QVBoxLayout(tab2)
        lbl2 = QLabel("–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
        lbl2.setFont(QFont("Arial", 16, QFont.Bold))
        t2.addWidget(lbl2)

        self.tree_tasks = QTreeWidget()
        self.tree_tasks.setHeaderLabels(["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–£—á–∞—Å—Ç–æ–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"])
        self.tree_tasks.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_tasks.setStyleSheet(CSS_TREE)
        t2.addWidget(self.tree_tasks, 1)

        self.tabs.addTab(tab2, "–ó–∞–¥–∞–Ω–∏—è")

        # ----- Tab 3: –ù–∞—Ä—è–¥—ã -----
        tab3 = QWidget(); t3 = QVBoxLayout(tab3)
        lbl3 = QLabel("–ù–∞—Ä—è–¥—ã –Ω–∞ –≤–æ—Å–∫–æ–≤–∫—É")
        lbl3.setFont(QFont("Arial", 16, QFont.Bold))
        t3.addWidget(lbl3)

        self.tree_acts = QTreeWidget()
        self.tree_acts.setHeaderLabels(["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å"])
        self.tree_acts.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_acts.setStyleSheet(CSS_TREE)
        t3.addWidget(self.tree_acts, 1)

        self.tabs.addTab(tab3, "–ù–∞—Ä—è–¥—ã –∏–∑ 1–°")
        
    def _fill_tasks_tree(self):
        self.tree_tasks.clear()
        for t in bridge.list_tasks():
            QTreeWidgetItem(self.tree_tasks, [
                t.get("num", ""),
                t.get("date", ""),
                t.get("employee", ""),
                t.get("tech_op", ""),
                ""
            ])

    def _fill_wax_jobs_tree(self):
        self.tree_acts.clear()
        for t in bridge.list_wax_jobs():
            QTreeWidgetItem(self.tree_acts, [
                t.get("num", ""),
                t.get("date", ""),
                t.get("status", "")
            ])    
        

    def _create_task(self):
        from PyQt5.QtWidgets import QInputDialog

        if not ORDERS_POOL:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
            return

        order_list = [o["docs"]["order_code"] for o in ORDERS_POOL]
        selected, ok = QInputDialog.getItem(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑", "–ó–∞–∫–∞–∑:", order_list, editable=False)
        if ok and selected:
            order = next((o["order"] for o in ORDERS_POOL if o["docs"]["order_code"] == selected), None)
            if order:
                try:
                    num = bridge.create_task_from_order(order)
                    QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{num} —Å–æ–∑–¥–∞–Ω–æ")
                except Exception as e:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    # ------------------------------------------------------------------
    def _create_wax_jobs(self):
        from PyQt5.QtWidgets import QInputDialog

        tasks = bridge.list_tasks()
        if not tasks:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–í 1–° –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            return

        task_numbers = [t["num"] for t in tasks]
        selected, ok = QInputDialog.getItem(self, "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—è–¥–æ–≤", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", task_numbers, editable=False)
        if ok and selected:
            try:
                num = bridge.create_wax_job_from_task(selected)
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ù–∞—Ä—è–¥ ‚Ññ{num} —Å–æ–∑–¥–∞–Ω")
                self.refresh()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    # ------------------------------------------------------------------
    def _sync_job(self):
        code = self._selected_job_code()
        if not code:
            QMessageBox.warning(self, "–ù–∞—Ä—è–¥", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∞—Ä—è–¥")

        task_num, ok = QInputDialog.getText(self, "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—è–¥–æ–≤", "–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:")
        if not ok or not task_num:

            return
        try:
            count = bridge.create_multiple_wax_jobs_from_task(task_num)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°–æ–∑–¥–∞–Ω–æ {count} –Ω–∞—Ä—è–¥–æ–≤")
            self.refresh()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))



    def refresh(self):
        self._fill_jobs_tree()
        self._fill_parties_tree()

    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ù–∞—Ä—è–¥—ã¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_jobs_tree(self):
        self.tree_jobs.clear()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ wax_job (–æ–¥–∏–Ω –Ω–∞—Ä—è–¥ = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)
        grouped = defaultdict(list)
        for job in WAX_JOBS_POOL:
            grouped[job["wax_job"]].append(job)

        for wax_code, rows in grouped.items():
            j0 = rows[0]  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            method_label = METHOD_LABEL.get(j0["method"], j0["method"])
            total_qty = sum(r["qty"] for r in rows)
            total_weight = sum(r["weight"] for r in rows)

            # –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî —Å–∞–º –Ω–∞—Ä—è–¥
            root = QTreeWidgetItem(self.tree_jobs, [
                f"{method_label} ({wax_code})",
                method_label,
                str(total_qty),
                f"{total_weight:.3f}",
                j0.get("status", ""),
                '‚úÖ' if j0.get('sync_doc_num') else ''
            ])
            root.setExpanded(True)

            # –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            for r in rows:
                QTreeWidgetItem(root, [
                    r["articles"],
                    "",
                    str(r["qty"]),
                    f"{r.get('weight', 0.0):.3f}",
                    "", ""
                ])

    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ü–∞—Ä—Ç–∏–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_parties_tree(self):
        self.tree_part.clear()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏—è—Ö –±–µ—Ä—ë–º –∏–∑ ORDERS_POOL
        for pack in ORDERS_POOL:
            for b in pack["docs"].get("batches", []):
                root = QTreeWidgetItem(self.tree_part, [
                    f"–ü–∞—Ä—Ç–∏—è {b['batch_barcode']}  ({b['metal']} {b['hallmark']} {b['color']})",
                    str(b["qty"]), f"{b['total_w']:.3f}"
                ])
                root.setExpanded(True)

                agg = defaultdict(lambda: dict(qty=0, weight=0))
                for row in pack["order"]["rows"]:
                    if (row["metal"], row["hallmark"], row["color"]) == (
                        b["metal"], b["hallmark"], b["color"]):
                        k = (row["article"], row["size"])
                        agg[k]["qty"] += row["qty"]
                        agg[k]["weight"] += row["weight"]

                for (art, size), d in agg.items():
                    QTreeWidgetItem(root, [
                        f"{art}  (—Ä-—Ä {size})",
                        str(d["qty"]), f"{d['weight']:.3f}"
                    ])



# ----------------------------------------------------------------------
def _wax_method(article:str)->str:
    """–ù–µ–±–æ–ª—å—à–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É."""
    art = str(article).lower()
    if "–¥" in art or "d" in art:
        return "3d"
    return "rubber"
