# wax_page.py ‚Ä¢ v0.8
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from collections import defaultdict
import re
from PyQt5.QtCore    import Qt
from PyQt5.QtGui     import QFont
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QTreeWidget, QTreeWidgetItem,
    QHeaderView, QPushButton, QMessageBox, QTabWidget, QInputDialog,
    QComboBox, QFormLayout, QTableWidget, QTableWidgetItem
)
from logic.production_docs import (
    WAX_JOBS_POOL,
    ORDERS_POOL,
    METHOD_LABEL,
    process_new_order,
)
from pages.orders_page import parse_variant
from core.com_bridge import log
import config
from config import CSS_TREE
from widgets.production_task_form import ProductionTaskEditForm

class WaxPage(QWidget):
    def __init__(self):
        super().__init__()
        self.last_created_task_ref = None
        self.jobs_page = None
        self._task_select_callback = None
        self._ui()
        self.refresh()

    def set_jobs_page(self, jobs_page):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Ä—è–¥–æ–≤."""
        self.jobs_page = jobs_page

    def goto_order_selection(self, callback=None):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç callback –≤—ã–±–æ—Ä–∞."""
        main_win = self.window()
        if hasattr(main_win, "menu") and hasattr(main_win, "page_idx"):
            orders_idx = main_win.page_idx.get("orders")
            if orders_idx is not None:
                main_win.menu.setCurrentRow(orders_idx)
                orders_page = main_win.page_refs.get("orders")
                if orders_page and hasattr(orders_page, "set_selection_callback"):
                    orders_page.set_selection_callback(callback)
                    if hasattr(orders_page, "tabs"):
                        orders_page.tabs.setCurrentIndex(1)

    def select_task_for_wax_jobs(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        self._task_select_callback = self.load_task_data
        self.tabs.setCurrentWidget(self.tab_tasks)
        if hasattr(self, "tabs_tasks"):
            self.tabs_tasks.setCurrentIndex(1)

    def refresh(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏."""
        self._fill_tasks_tree()
        self._fill_jobs_tree()
        self._fill_parties_tree()

    # ------------------------------------------------------------------
    def _ui(self):
        v = QVBoxLayout(self)
        v.setContentsMargins(40, 30, 40, 30)

        hdr = QLabel("–í–æ—Å–∫–æ–≤–∞–Ω–∏–µ / 3-D –ø–µ—á–∞—Ç—å")
        hdr.setFont(QFont("Arial", 22, QFont.Bold))
        v.addWidget(hdr)

        self.tabs = QTabWidget()
        v.addWidget(self.tabs, 1)

        # ----- Tab: –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ -----
        self.tab_tasks = QWidget()
        t_main = QVBoxLayout(self.tab_tasks)
        self.tabs_tasks = QTabWidget()
        t_main.addWidget(self.tabs_tasks, 1)

        # --- sub-tab: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ---
        tab_task_new = QWidget(); t_new = QVBoxLayout(tab_task_new)
        self.task_form = ProductionTaskEditForm(config.BRIDGE)
        self.task_form.task_saved.connect(
            lambda ref: setattr(self, "last_created_task_ref", config.BRIDGE.get_object_from_ref(ref) if ref else None)
        )
        t_new.addWidget(self.task_form)

        tab_tasks_list = QWidget(); t1 = QVBoxLayout(tab_tasks_list)
        lbl2 = QLabel("–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
        lbl2.setFont(QFont("Arial", 16, QFont.Bold))
        t1.addWidget(lbl2)

        self.tree_tasks = QTreeWidget()
        self.tree_tasks.setHeaderLabels([
            "‚úì", "–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–£—á–∞—Å—Ç–æ–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
        ])
        self.tree_tasks.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_tasks.setStyleSheet(CSS_TREE)
        t1.addWidget(self.tree_tasks, 1)

        btn_bar = QHBoxLayout()

        btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        btn_post = QPushButton("‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ")
        btn_unpost = QPushButton("‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ")
        btn_mark = QPushButton("üè∑ –ü–æ–º–µ—Ç–∏—Ç—å")
        btn_unmark = QPushButton("üö´ –°–Ω—è—Ç—å –ø–æ–º–µ—Ç–∫—É")
        btn_delete = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")
        btn_to_work = QPushButton("üì§ –í —Ä–∞–±–æ—Ç—É")

        btn_bar.addWidget(btn_refresh)
        btn_bar.addWidget(btn_post)
        btn_bar.addWidget(btn_unpost)
        btn_bar.addWidget(btn_mark)
        btn_bar.addWidget(btn_unmark)
        btn_bar.addWidget(btn_delete)
        btn_bar.addWidget(btn_to_work)

        btn_refresh.clicked.connect(self._fill_tasks_tree)
        btn_post.clicked.connect(self._post_selected_tasks)
        btn_unpost.clicked.connect(self._unpost_selected_tasks)
        btn_mark.clicked.connect(self._mark_selected_tasks)
        btn_unmark.clicked.connect(self._unmark_selected_tasks)
        btn_delete.clicked.connect(self._delete_selected_tasks)
        btn_to_work.clicked.connect(self._send_task_to_work)

        t1.addLayout(btn_bar)

        self.tabs_tasks.addTab(tab_task_new, "–°–æ–∑–¥–∞–Ω–∏–µ")
        self.tabs_tasks.addTab(tab_tasks_list, "–ó–∞–¥–∞–Ω–∏—è")
        self.tabs.addTab(self.tab_tasks, "–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")

        # ----- Tab: –ù–∞—Ä—è–¥—ã –≤–æ—Å–∫–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π –ø–æ –º–µ—Ç–æ–¥–∞–º -----
        self.tab_jobs = QWidget()
        j_main = QVBoxLayout(self.tab_jobs)
        self.tabs_jobs = QTabWidget()
        j_main.addWidget(self.tabs_jobs, 1)

        tab_jobs_new = QWidget(); j_new = QVBoxLayout(tab_jobs_new)
        lbl_new = QLabel("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—è–¥–æ–≤")
        lbl_new.setFont(QFont("Arial", 16, QFont.Bold))
        j_new.addWidget(lbl_new)

        form = QFormLayout()
        self.combo_3d_master = QComboBox(); self.combo_3d_master.setEditable(True)
        self.combo_3d_master.addItems(config.EMPLOYEES)
        self.combo_form_master = QComboBox(); self.combo_form_master.setEditable(True)
        self.combo_form_master.addItems(config.EMPLOYEES)
        form.addRow("3D –ø–µ—á–∞—Ç—å", self.combo_3d_master)
        form.addRow("–ü—Ä–µ—Å—Å-—Ñ–æ—Ä–º–∞", self.combo_form_master)
        j_new.addLayout(form)

        self.btn_select_task = QPushButton("–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        self.btn_select_task.clicked.connect(self.select_task_for_wax_jobs)
        j_new.addWidget(self.btn_select_task, alignment=Qt.AlignLeft)


        self.lbl_task_number = QLabel("–ó–∞–¥–∞–Ω–∏–µ: ‚Ññ ‚Äî")
        self.lbl_task_date = QLabel("–î–∞—Ç–∞: ‚Äî")

        info_layout = QHBoxLayout()
        info_layout.addWidget(self.lbl_task_number)
        info_layout.addWidget(self.lbl_task_date)
        j_new.addLayout(info_layout)

        self.lbl_task_info = QLabel("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        j_new.addWidget(self.lbl_task_info, alignment=Qt.AlignLeft)


        self.tbl_task_lines = QTableWidget(0, 7)
        self.tbl_task_lines.setHorizontalHeaderLabels([
            "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–ê—Ä—Ç–∏–∫—É–ª", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç",
            "–ö–æ–ª-–≤–æ", "–í–µ—Å"
        ])
        self.tbl_task_lines.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tbl_task_lines.verticalHeader().setVisible(False)
        j_new.addWidget(self.tbl_task_lines, 1)

        btn_create_jobs = QPushButton("–°–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥—ã")
        btn_create_jobs.clicked.connect(self._create_wax_jobs)
        j_new.addWidget(btn_create_jobs, alignment=Qt.AlignLeft)

        tab_jobs_list = QWidget(); j1 = QVBoxLayout(tab_jobs_list)
        lbl_jobs = QLabel("–ù–∞—Ä—è–¥—ã (–≤–æ—Å–∫–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è)")
        lbl_jobs.setFont(QFont("Arial", 16, QFont.Bold))
        j1.addWidget(lbl_jobs)

        self.tree_jobs = QTreeWidget()
        self.tree_jobs.setHeaderLabels([
            "–ù–æ–º–µ—Ä",
            "–î–∞—Ç–∞",
            "–ó–∞–∫—Ä—ã—Ç",
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
            "–¢–µ—Ö. –æ–ø–µ—Ä–∞—Ü–∏—è",
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            "–°–∫–ª–∞–¥",
            "–£—á–∞—Å—Ç–æ–∫",
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
            "–ó–∞–¥–∞–Ω–∏–µ",
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
        ])
        self.tree_jobs.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tree_jobs.setStyleSheet(CSS_TREE)
        j1.addWidget(self.tree_jobs, 1)

        btn_bar_jobs = QHBoxLayout()
        btn_jobs_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        btn_bar_jobs.addWidget(btn_jobs_refresh)
        btn_jobs_refresh.clicked.connect(self._fill_jobs_tree)
        j1.addLayout(btn_bar_jobs)

        self.tabs_jobs.addTab(tab_jobs_new, "–°–æ–∑–¥–∞–Ω–∏–µ")
        self.tabs_jobs.addTab(tab_jobs_list, "–ù–∞—Ä—è–¥—ã (–≤–æ—Å–∫–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è)")
        self.tabs.addTab(self.tab_jobs, "–ù–∞—Ä—è–¥—ã –≤–æ—Å–∫–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π –ø–æ –º–µ—Ç–æ–¥–∞–º")

        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.tree_tasks.itemDoubleClicked.connect(self._on_task_double_click)
        self.tree_jobs.itemDoubleClicked.connect(self._on_wax_job_double_click)

    def _show_wax_job_detail(self, item):
        from PyQt5.QtWidgets import QDialog, QTableWidget, QTableWidgetItem, QVBoxLayout
        num = item.text(0)
        rows = config.BRIDGE.get_wax_job_rows(num)

        dlg = QDialog(self)
        dlg.setWindowTitle(f"–°—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ {num}")
        dlg.setMinimumWidth(1000)
        layout = QVBoxLayout(dlg)

        tbl = QTableWidget()
        tbl.setRowCount(len(rows))
        tbl.setColumnCount(9)
        tbl.setHorizontalHeaderLabels([
            "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–†–∞–∑–º–µ—Ä", "–ü—Ä–æ–±–∞", "–¶–≤–µ—Ç", "–ö–æ–ª-–≤–æ", "–í–µ—Å", "–ü–∞—Ä—Ç–∏—è", "–Å–ª–∫–∞", "–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞"
        ])
        for i, r in enumerate(rows):
            for j, k in enumerate([
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞",
                "–†–∞–∑–º–µ—Ä",
                "–ü—Ä–æ–±–∞",
                "–¶–≤–µ—Ç",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "–í–µ—Å",
                "–ü–∞—Ä—Ç–∏—è",
                "–ù–æ–º–µ—Ä —ë–ª–∫–∏",
                "–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞",
            ]):
                val = r.get(k, "")
                if k == "–í–µ—Å" and val != "":
                    val = f"{val:.{config.WEIGHT_DECIMALS}f}"
                tbl.setItem(i, j, QTableWidgetItem(str(val)))

        tbl.resizeColumnsToContents()
        layout.addWidget(tbl)
        dlg.setLayout(layout)
        dlg.exec_()
        
    def _get_checked_tasks(self):
        result = []
        for i in range(self.tree_tasks.topLevelItemCount()):
            item = self.tree_tasks.topLevelItem(i)
            if item.checkState(0) == Qt.Checked:
                result.append(item.text(1))  # –ù–æ–º–µ—Ä
        print("[DEBUG] –û—Ç–º–µ—á–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è:", result)
        return result

    def _selected_job_code(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Ä—è–¥–∞ –∏–ª–∏ None."""
        item = self.tree_jobs.currentItem()
        if not item:
            return None

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç, –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —É—Ä–æ–≤–Ω—é
        while item.parent():
            item = item.parent()

        text = item.text(0)
        m = re.search(r"\((WX[^)]+)\)", text)
        return m.group(1) if m else None
    
    def _post_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            config.BRIDGE.post_task(num)
        self._fill_tasks_tree()

    def _unpost_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            config.BRIDGE.undo_post_task(num)
        self._fill_tasks_tree()

    def _mark_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            config.BRIDGE.mark_task_for_deletion(num)
        self._fill_tasks_tree()

    def _unmark_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            config.BRIDGE.unmark_task_deletion(num)
        self._fill_tasks_tree()

    def _delete_selected_tasks(self):
        for num in self._get_checked_tasks():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ: {num}")
            config.BRIDGE.delete_task(num)
        self._fill_tasks_tree()

    def _send_task_to_work(self):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤."""
        item = self.tree_tasks.currentItem()
        if not item:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ")
            return
        num = item.text(1).strip() if item.columnCount() > 1 else item.text(0).strip()
        if not num:
            return
        task_obj = config.BRIDGE._find_task_by_number(num)
        if hasattr(task_obj, "GetObject"):
            task_obj = task_obj.GetObject()
        self.load_task_data(task_obj)
        self.tabs.setCurrentWidget(self.tab_jobs)
        if hasattr(self, "tabs_jobs"):
            self.tabs_jobs.setCurrentIndex(0)

    def populate_jobs_tree(self, doc_num: str):
        self.tree_jobs.clear()
        self.tree_part.clear()

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ –Ω–∞—Ä—è–¥
            rows = config.BRIDGE.get_wax_job_rows(doc_num)
            if rows:
                log(f"[populate_jobs_tree] –ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ ‚Ññ{doc_num}: {len(rows)}")
                self.refresh()
                return
        except Exception as e:
            log(f"[populate_jobs_tree] –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∞–∫ –Ω–∞—Ä—è–¥: {e}")

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            task = config.BRIDGE._find_task_by_number(doc_num)
            if task and getattr(task, "–î–æ–∫—É–º–µ–Ω—Ç–û—Å–Ω–æ–≤–∞–Ω–∏–µ", None):
                base_ref = getattr(task, "–î–æ–∫—É–º–µ–Ω—Ç–û—Å–Ω–æ–≤–∞–Ω–∏–µ")
                base_obj = config.BRIDGE.get_object_from_ref(base_ref)
                order_num = base_obj.–ù–æ–º–µ—Ä
                log(f"[populate_jobs_tree] –ó–∞–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–∫–∞–∑–æ–º ‚Ññ{order_num}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                order_lines = config.BRIDGE.get_order_lines(order_num)
                order_json_rows = []
                for r in order_lines:
                    metal, hallmark, color = parse_variant(r.get("method", ""))
                    order_json_rows.append(
                        {
                            "article": r.get("article", ""),
                            "size": r.get("size", 0),
                            "qty": r.get("qty", 0),
                            "weight": r.get("weight", 0),
                            "metal": metal,
                            "hallmark": hallmark,
                            "color": color,
                        }
                    )

                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º ORDERS_POOL –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                ORDERS_POOL.clear()
                process_new_order({"number": order_num, "rows": order_json_rows})
                log(
                    f"[ORDERS_POOL] –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –∏ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_num}"
                )

                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
                self.refresh()
            else:
                log("[populate_jobs_tree] –ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è")
        except Exception as ee:
            log(f"[populate_jobs_tree] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –∑–∞–¥–∞–Ω–∏—è: {ee}")

    def _on_task_double_click(self, item, column):
        num = item.text(1).strip() if item.columnCount() > 1 else item.text(0).strip()
        if not num:
            return

        task_obj = config.BRIDGE._find_task_by_number(num)
        if hasattr(task_obj, "GetObject"):
            task_obj = task_obj.GetObject()
        self.last_created_task_ref = task_obj
        if self._task_select_callback:
            cb = self._task_select_callback
            self._task_select_callback = None
            cb(task_obj)
            self.tabs.setCurrentWidget(self.tab_jobs)
            if hasattr(self, "tabs_jobs"):
                self.tabs_jobs.setCurrentIndex(0)
        else:
            self.tabs.setCurrentIndex(0)
            if hasattr(self, "tabs_tasks"):
                self.tabs_tasks.setCurrentIndex(0)
            self.task_form.load_task_object(task_obj)
        log(f"[UI] –í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{num}.")

    def load_task_data(self, task_obj):
        if not task_obj:
            log("[UI] ‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        self.last_created_task_ref = task_obj
        self._fill_jobs_table_from_task(task_obj)


        if hasattr(self, "lbl_task_number") and hasattr(self, "lbl_task_date"):
            self.lbl_task_number.setText(f"–ó–∞–¥–∞–Ω–∏–µ: ‚Ññ {task_obj.–ù–æ–º–µ—Ä}")
            try:
                d = task_obj.–î–∞—Ç–∞.strftime("%d.%m.%Y")
            except Exception:
                d = ""
            self.lbl_task_date.setText(f"–î–∞—Ç–∞: {d}")

        if hasattr(self, "lbl_task_info"):
            try:
                d = str(task_obj.–î–∞—Ç–∞)[:10]
            except Exception:
                d = ""
            self.lbl_task_info.setText(f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_obj.–ù–æ–º–µ—Ä} –æ—Ç {d}")


        log(f"[UI] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_obj.–ù–æ–º–µ—Ä}")

    def _fill_jobs_table_from_task(self, task_obj):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Ä—è–¥–æ–≤ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
        lines = config.BRIDGE.get_task_lines(getattr(task_obj, "–ù–æ–º–µ—Ä", ""))
        if not hasattr(self, "tbl_task_lines"):
            log("[UI] –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç—Ä–æ–∫ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return

        self.tbl_task_lines.setRowCount(len(lines))
        for r, row in enumerate(lines):
            values = [
                row.get("nomen", ""),
                row.get("article", ""),
                row.get("size", ""),
                row.get("sample", ""),
                row.get("color", ""),
                row.get("qty", ""),
                f"{row['weight']:.{config.WEIGHT_DECIMALS}f}" if row.get("weight") not in ("", None) else "",
            ]
            for c, v in enumerate(values):
                self.tbl_task_lines.setItem(r, c, QTableWidgetItem(str(v)))
        self.tbl_task_lines.resizeColumnsToContents()
        log(f"[UI] –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–∫ –∑–∞–¥–∞–Ω–∏—è: {len(lines)}")

    def _on_wax_job_double_click(self, item, column):
        num = item.text(0).split()[0].strip()
        if not num:
            return

        lines = config.BRIDGE.get_wax_job_lines(num)
        if not lines:
            QMessageBox.information(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–í –Ω–∞—Ä—è–¥–µ {num} –Ω–µ—Ç —Å—Ç—Ä–æ–∫")
            return

        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QTreeWidget, QTreeWidgetItem

        dlg = QDialog(self)
        dlg.setWindowTitle(f"–°—Ç—Ä–æ–∫–∏ –Ω–∞—Ä—è–¥–∞ {num}")
        layout = QVBoxLayout(dlg)

        tree = QTreeWidget()
        tree.setHeaderLabels([
            "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞",
            "–†–∞–∑–º–µ—Ä",
            "–ü—Ä–æ–±–∞",
            "–¶–≤–µ—Ç",
            "–ö–æ–ª-–≤–æ",
            "–í–µ—Å",
        ])
        for row in lines:
            QTreeWidgetItem(
                tree,
                [
                    row["nomen"],
                    str(row["size"]),
                    str(row["sample"]),
                    str(row["color"]),
                    str(row["qty"]),
                    f"{row['weight']:.{config.WEIGHT_DECIMALS}f}",
                ],
            )
        layout.addWidget(tree)
        dlg.resize(700, 400)
        dlg.exec_()

    def _fill_tasks_tree(self):
        self.tree_tasks.clear()
        for t in config.BRIDGE.list_tasks():
            status = ""
            if t.get("posted"):
                status = "‚úÖ"
            elif t.get("deleted"):
                status = "üóë"
            item = QTreeWidgetItem([
                status,
                t.get("num", ""),
                t.get("date", ""),
                t.get("section", ""),
                t.get("tech_op", ""),
                t.get("employee", "")
            ])
            item.setCheckState(0, Qt.Unchecked)
            from PyQt5.QtGui import QBrush, QColor

            if t.get("deleted"):
                for i in range(item.columnCount()):
                    item.setBackground(i, QBrush(QColor("#f87171")))  # –∫—Ä–∞—Å–Ω—ã–π
            elif t.get("posted"):
                for i in range(item.columnCount()):
                    item.setBackground(i, QBrush(QColor("#bbf7d0")))  # –∑–µ–ª—ë–Ω—ã–π
            self.tree_tasks.addTopLevelItem(item)

    def _fill_wax_jobs_tree(self):
        if not hasattr(self, "tree_acts"):
            return
        self.tree_acts.clear()
        for t in config.BRIDGE.list_wax_jobs():
            QTreeWidgetItem(self.tree_acts, [
                t.get("num", ""),
                t.get("date", ""),
                t.get("organization", ""),
                t.get("warehouse", ""),
                t.get("section", ""),
                t.get("employee", ""),
                t.get("tech_op", ""),
                t.get("status", ""),
                t.get("based_on", "")
            ])


    # ------------------------------------------------------------------
    def _create_wax_jobs(self):
        # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ORDERS_POOL –º–µ—à–∞–ª–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Ä—è–¥—ã –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        # –∑–∞–¥–∞–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –µ—ë —É–±—Ä–∞–ª–∏.

        if not hasattr(self, "combo_3d_master") or not hasattr(self, "combo_form_master"):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—è–¥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return

        master_3d = self.combo_3d_master.currentText().strip()
        master_resin = self.combo_form_master.currentText().strip()

        if not master_3d or not master_resin:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤.")
            return


        if not self.last_created_task_ref:

            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤.")
            return

        print("[DEBUG] last_created_task_ref =", self.last_created_task_ref)
        result = config.BRIDGE.create_wax_jobs_from_task(
            self.last_created_task_ref,
            master_3d,
            master_resin,
        )

        if result:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Ä—è–¥—ã: " + ", ".join(result))
            self.refresh()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥—ã.")

    # ------------------------------------------------------------------
    def _sync_job(self):
        if not hasattr(self, "tree_jobs"):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        code = self._selected_job_code()
        if not code:
            QMessageBox.warning(self, "–ù–∞—Ä—è–¥", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∞—Ä—è–¥")

        task_num, ok = QInputDialog.getText(self, "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—è–¥–æ–≤", "–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:")
        if not ok or not task_num:

            return
        try:
            count = config.BRIDGE.create_wax_jobs_from_task(
                task_num,
                self.combo_3d_master.currentText().strip(),
                self.combo_form_master.currentText().strip(),
            )
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°–æ–∑–¥–∞–Ω–æ {len(count)} –Ω–∞—Ä—è–¥–æ–≤")
            self.refresh()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))


    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ù–∞—Ä—è–¥—ã¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_jobs_tree(self):
        if not hasattr(self, "tree_jobs"):
            return
        self.tree_jobs.clear()

        jobs = config.BRIDGE.list_wax_jobs()
        for job in jobs:
            item = QTreeWidgetItem([
                job["–ù–æ–º–µ—Ä"],
                job["–î–∞—Ç–∞"],
                job["–ó–∞–∫—Ä—ã—Ç"],
                job["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"],
                job["–¢–µ—Ö–û–ø–µ—Ä–∞—Ü–∏—è"],
                job["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"],
                job["–°–∫–ª–∞–¥"],
                job["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π–£—á–∞—Å—Ç–æ–∫"],
                job["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"],
                job["–ó–∞–¥–∞–Ω–∏–µ"],
                job["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"],
            ])
            self.tree_jobs.addTopLevelItem(item)

    # ‚Äî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–µ–≤–æ ¬´–ü–∞—Ä—Ç–∏–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fill_parties_tree(self):
        if not hasattr(self, "tree_part"):
            return
        self.tree_part.clear()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏—è—Ö –±–µ—Ä—ë–º –∏–∑ ORDERS_POOL
        for pack in ORDERS_POOL:
            for b in pack["docs"].get("batches", []):
                root = QTreeWidgetItem(self.tree_part, [
                    f"–ü–∞—Ä—Ç–∏—è {b['batch_barcode']}  ({b['metal']} {b['hallmark']} {b['color']})",
                    str(b["qty"]), f"{b['total_w']:.{config.WEIGHT_DECIMALS}f}"
                ])
                root.setExpanded(True)

                agg = defaultdict(lambda: dict(qty=0, weight=0))
                for row in pack["order"]["rows"]:
                    if (row["metal"], row["hallmark"], row["color"]) == (
                        b["metal"], b["hallmark"], b["color"]):
                        k = (row["article"], row["size"])
                        agg[k]["qty"] += row["qty"]
                        agg[k]["weight"] += row["weight"]

                for (art, size), d in agg.items():
                    QTreeWidgetItem(root, [
                        f"{art}  (—Ä-—Ä {size})",
                        str(d["qty"]), f"{d['weight']:.{config.WEIGHT_DECIMALS}f}"
                    ])

