import pywintypes
from datetime import datetime
from PyQt5.QtWidgets import (
    QWidget, QLabel, QVBoxLayout, QFormLayout, QComboBox, QDateEdit,
    QSpinBox, QDoubleSpinBox, QTableWidget, QTableWidgetItem, QPushButton,
    QMessageBox, QHeaderView, QTabWidget, QHBoxLayout, QAbstractItemView,
    QLineEdit  # ‚Üê –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ
)
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt
from core.com_bridge import COM1CBridge

bridge = COM1CBridge("C:\\Users\\Mor\\Desktop\\1C\\proiz")

class OrdersPage(QWidget):
    COLS = ["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º.", "–í–∞—Ä–∏–∞–Ω—Ç", "–†–∞–∑–º–µ—Ä", "–ö–æ–ª-–≤–æ", "–í–µ—Å, –≥", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"]

    def __init__(self):
        super().__init__()
        self.articles = bridge.get_articles()
        self.organizations = bridge.list_catalog_items("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        self.counterparties = bridge.list_catalog_items("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã")
        self.contracts = bridge.list_catalog_items("–î–æ–≥–æ–≤–æ—Ä—ã–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
        self.warehouses = bridge.list_catalog_items("–°–∫–ª–∞–¥—ã")
        self.production_statuses = []
        self._ui()
        self._load_orders()

    def _ui(self):
        outer = QVBoxLayout(self)
        self.tabs = QTabWidget()
        outer.addWidget(self.tabs)

        self.frm_new = QWidget()
        v = QVBoxLayout(self.frm_new)
        hdr = QLabel("–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
        hdr.setFont(QFont("Arial", 22, QFont.Bold))
        v.addWidget(hdr)

        form = QFormLayout()
        self.ed_num = QLabel(bridge.get_next_order_number())
        self.d_date = QDateEdit(datetime.now()); self.d_date.setCalendarPopup(True)
        self.c_org = QComboBox(); self.c_org.addItems([x["Description"] for x in self.organizations])
        self.c_contr = QComboBox(); self.c_contr.addItems([x["Description"] for x in self.counterparties])
        self.c_ctr = QComboBox(); self.c_ctr.addItems([x["Description"] for x in self.contracts])
        self.c_wh = QComboBox(); self.c_wh.addItems([x["Description"] for x in self.warehouses])
        self.status_combo = QComboBox(); self.status_combo.addItems(self.production_statuses)

        for label, widget in [
            ("–ù–æ–º–µ—Ä", self.ed_num), ("–î–∞—Ç–∞", self.d_date),
            ("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", self.c_org), ("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", self.c_contr),
            ("–î–æ–≥–æ–≤–æ—Ä", self.c_ctr), ("–°–∫–ª–∞–¥", self.c_wh),
            ("–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", self.status_combo)
        ]:
            form.addRow(label, widget)
        v.addLayout(form)

        self.tbl = QTableWidget(0, len(self.COLS))
        self.tbl.setHorizontalHeaderLabels(self.COLS)
        self.tbl.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tbl.verticalHeader().setVisible(False)
        v.addWidget(self.tbl)
        self._add_row()

        btns = QHBoxLayout()
        for label, func in [
            ("+ —Å—Ç—Ä–æ–∫–∞", self._add_row),
            ("‚àí —Å—Ç—Ä–æ–∫–∞", self._remove_row),
            ("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", self._new_order),
            ("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É", self._copy_row),
            ("üíæ –ó–∞–ø–∏—Å–∞—Ç—å", self._post_close)
        ]:
            btn = QPushButton(label); btn.clicked.connect(func); btns.addWidget(btn)
        v.addLayout(btns)
        self.tabs.addTab(self.frm_new, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑")

        self.tbl_orders = QTableWidget(0, 10)
        self.tbl_orders.setHorizontalHeaderLabels([
            "‚úì", "–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–í–∏–¥/—Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í–µ—Å",
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–î–æ–≥–æ–≤–æ—Ä", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        ])
        self.tbl_orders.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tbl_orders.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tbl_orders.cellDoubleClicked.connect(self._show_order)

        tab_orders = QWidget()
        layout = QVBoxLayout(tab_orders)
        layout.addWidget(QLabel("üìã –ó–∞–∫–∞–∑—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ"))

        buttons = QHBoxLayout()
        for label, func in [
            ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self._load_orders),
            ("‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ", self._mass_post),
            ("üß∑ –ü–æ–º–µ—Ç–∏—Ç—å", lambda: self._mark_deleted(True)),
            ("üìç –°–Ω—è—Ç—å –ø–æ–º–µ—Ç–∫—É", lambda: self._mark_deleted(False)),
            ("üóë –£–¥–∞–ª–∏—Ç—å", self._delete_selected_order)
        ]:
            btn = QPushButton(label); btn.clicked.connect(func); buttons.addWidget(btn)
        layout.addLayout(buttons)
        layout.addWidget(self.tbl_orders)
        self.tabs.addTab(tab_orders, "–ó–∞–∫–∞–∑—ã")

    def _add_row(self, copy_from: int = None):
        r = self.tbl.rowCount()
        self.tbl.insertRow(r)

        art = QComboBox(); art.setEditable(True); art.addItems(self.articles.keys())
        name = QTableWidgetItem("")
        variant = QComboBox()
        size = QDoubleSpinBox()
        size.setDecimals(1)
        size.setRange(0.5, 50.0)
        size.setSingleStep(0.5)     # —à–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        size.setValue(16.0)
        qty = QSpinBox(); qty.setRange(1, 999); qty.setValue(1)
        wgt = QDoubleSpinBox(); wgt.setDecimals(3); wgt.setMaximum(9999)
        comment = QLineEdit()
        self.tbl.setCellWidget(r, 6, comment)

        widgets = [art, name, variant, size, qty, wgt, comment]
        for c, w in enumerate(widgets):
            if isinstance(w, (QComboBox, QSpinBox, QDoubleSpinBox, QLineEdit)):
                self.tbl.setCellWidget(r, c, w)
            else:
                self.tbl.setItem(r, c, w)

        def fill():
            selected = art.currentText().strip()
            card = self.articles.get(selected, {})
            name.setText(card.get("name", ""))
            if card.get("size"): size.setValue(float(card["size"]))
            wgt.setValue(round(card.get("w", 0) * qty.value(), 3))
            variant.clear()
            variant.addItems(bridge.get_variants_by_article(selected) or ["‚Äî"])

        art.currentTextChanged.connect(fill)
        qty.valueChanged.connect(fill)

        if copy_from is not None:
            for i, (src, dst) in enumerate(zip(range(self.tbl.columnCount()), widgets)):
                if isinstance(dst, QComboBox):
                    current = self.tbl.cellWidget(copy_from, i).currentText()
                    dst.setCurrentText(current)
                elif isinstance(dst, QDoubleSpinBox) or isinstance(dst, QSpinBox):
                    dst.setValue(self.tbl.cellWidget(copy_from, i).value())
                elif isinstance(dst, QTableWidgetItem):
                    dst.setText(self.tbl.item(copy_from, i).text())
        else:
            fill()


    def _copy_last_row(self):
        r = self.tbl.rowCount()
        if r > 0:
            self._add_row(copy_from=r - 1)

    def _remove_row(self):
        r = self.tbl.rowCount()
        if r > 0:
            self.tbl.removeRow(r - 1)

    def _new_order(self):
        self.ed_num.setText(bridge.get_next_order_number())
        self.tbl.setRowCount(0)
        self._add_row()
        self.tabs.setCurrentIndex(0)

    def _post(self):
        fields = {
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": self.c_org.currentText(),
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": self.c_contr.currentText(),
            "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": self.c_ctr.currentText(),
            "–°–∫–ª–∞–¥": self.c_wh.currentText(),
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": f"–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ GUI {datetime.now():%d.%m.%Y %H:%M}",
            "–î–∞—Ç–∞": pywintypes.Time(self.d_date.date().toPyDate()),
            "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏": self.status_combo.currentText()
        }

        items = []  # ‚Üê –≤–æ—Ç —ç—Ç–æ –∏ –Ω—É–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å
        for row in range(self.tbl.rowCount()):
            art = self.tbl.cellWidget(row, 0).currentText()
            card = self.articles.get(art, {})
            items.append({
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": card.get("name", ""),
                "–ê—Ä—Ç–∏–∫—É–ª–ì–ü": card.get("name", ""),
                "–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è": self.tbl.cellWidget(row, 2).currentText(),
                "–†–∞–∑–º–µ—Ä": self.tbl.cellWidget(row, 3).value(),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": self.tbl.cellWidget(row, 4).value(),
                "–í–µ—Å": self.tbl.cellWidget(row, 5).value(),
                "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": self.tbl.cellWidget(row, 6).text() if self.tbl.cellWidget(row, 6) else "",
                "–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è": "—à—Ç"
            })

        number = bridge.create_order(fields, items)
        self.ed_num.setText(number)
        self._load_orders()
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –∑–∞–∫–∞–∑ ‚Ññ{number}")

    def _post_close(self):
        self._post()
        self.tabs.setCurrentIndex(1)

    def _load_orders(self):
        self.tbl_orders.setRowCount(0)
        self._orders = bridge.list_orders()
        for o in self._orders:
            r = self.tbl_orders.rowCount()
            self.tbl_orders.insertRow(r)
            chk = QTableWidgetItem(); chk.setCheckState(Qt.Unchecked)
            self.tbl_orders.setItem(r, 0, chk)
            status = "üü¢" if o.get("posted") else ("‚ùå" if o.get("deleted") else "‚ö™")
            vals = [
                f"{status} {o['num']}", o["date"], o.get("prod_status", ""),
                o.get("qty", 0), f"{o.get('weight', 0):.3f}",
                o.get("org", ""), o.get("contragent", ""), o.get("contract", ""), o.get("comment", "")
            ]
            for i, v in enumerate(vals):
                self.tbl_orders.setItem(r, i + 1, QTableWidgetItem(str(v)))

    def _mass_post(self):
        for i, o in enumerate(self._orders):
            if self.tbl_orders.item(i, 0).checkState() == Qt.Checked:
                bridge.post_order(o["num"])
        self._load_orders()

    def _delete_selected_order(self):
        selected = [i for i in range(self.tbl_orders.rowCount())
                    if self.tbl_orders.item(i, 0).checkState() == Qt.Checked]
        for i in selected:
            bridge.delete_order_by_number(self._orders[i]["num"])
        self._load_orders()

    def _mark_deleted(self, mark=True):
        for i in range(self.tbl_orders.rowCount()):
            if self.tbl_orders.item(i, 0).checkState() == Qt.Checked:
                number = self._orders[i]["num"]
                if mark:
                    bridge.mark_order_for_deletion(number)
                else:
                    bridge.unmark_order_deletion(number)
        self._load_orders()

    def _show_order(self, row, col):
        o = self._orders[row]
        text = "\n".join([f"{r['nomenclature']} ({r['qty']}—à—Ç, {r['w']}–≥)" for r in o.get("rows", [])]) or "(–Ω–µ—Ç —Å—Ç—Ä–æ–∫)"
        QMessageBox.information(self, f"–ó–∞–∫–∞–∑ ‚Ññ{o['num']}", f"{o['contragent']}\n\n{text}")
        
    def _copy_row(self):
        row = self.tbl.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ù–µ—Ç —Å—Ç—Ä–æ–∫–∏", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        self._add_row(copy_from=row)