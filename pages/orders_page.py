import pywintypes
from datetime import datetime
from PyQt5.QtWidgets import (
    QWidget, QLabel, QVBoxLayout, QFormLayout, QComboBox, QDateEdit,
    QSpinBox, QDoubleSpinBox, QTableWidget, QTableWidgetItem, QPushButton,
    QMessageBox, QHeaderView, QTabWidget, QHBoxLayout
)
from PyQt5.QtGui import QFont
from core.com_bridge import COM1CBridge

bridge = COM1CBridge("C:\\Users\\Mor\\Desktop\\1C\\proiz")

class OrdersPage(QWidget):
    COLS = ["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º.", "–í–∞—Ä–∏–∞–Ω—Ç", "–†–∞–∑–º–µ—Ä", "–ö–æ–ª-–≤–æ", "–í–µ—Å, –≥"]

    def __init__(self):
        super().__init__()
        self.articles = bridge.get_articles()
        self.organizations = bridge.list_catalog_items("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        self.counterparties = bridge.list_catalog_items("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã")
        self.contracts = bridge.list_catalog_items("–î–æ–≥–æ–≤–æ—Ä—ã–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
        self.warehouses = bridge.list_catalog_items("–°–∫–ª–∞–¥—ã")
        self.production_statuses = bridge.get_production_status_variants()
        self._ui()
        self._load_orders()

    def _ui(self):
        outer = QVBoxLayout(self)
        self.tabs = QTabWidget()
        outer.addWidget(self.tabs)

        self.frm_new = QWidget()
        v = QVBoxLayout(self.frm_new)

        hdr = QLabel("–ó–∞–∫–∞–∑ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
        hdr.setFont(QFont("Arial", 22, QFont.Bold))
        v.addWidget(hdr)

        form = QFormLayout()
        self.ed_num = QLabel(bridge.get_next_order_number())
        self.d_date = QDateEdit(datetime.now()); self.d_date.setCalendarPopup(True)
        self.c_org = QComboBox(); self.c_org.addItems([x["Description"] for x in self.organizations])
        self.c_contr = QComboBox(); self.c_contr.addItems([x["Description"] for x in self.counterparties])
        self.c_ctr = QComboBox(); self.c_ctr.addItems([x["Description"] for x in self.contracts])
        self.c_wh = QComboBox(); self.c_wh.addItems([x["Description"] for x in self.warehouses])
        self.status_combo = QComboBox(); self.status_combo.addItems(self.production_statuses)

        for lab, w in [
            ("–ù–æ–º–µ—Ä", self.ed_num), ("–î–∞—Ç–∞", self.d_date),
            ("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", self.c_org), ("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", self.c_contr),
            ("–î–æ–≥–æ–≤–æ—Ä", self.c_ctr), ("–°–∫–ª–∞–¥", self.c_wh),
            ("–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", self.status_combo)
        ]:
            form.addRow(lab, w)
        v.addLayout(form)

        self.tbl = QTableWidget(0, len(self.COLS))
        self.tbl.setHorizontalHeaderLabels(self.COLS)
        self.tbl.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tbl.verticalHeader().setVisible(False)
        v.addWidget(self.tbl)
        self._add_row()

        btns = QHBoxLayout()
        for txt, slot in [
            ("+ —Å—Ç—Ä–æ–∫–∞", self._add_row),
            ("‚àí —Å—Ç—Ä–æ–∫–∞", self._remove_row),
            ("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", self._new_order),
            ("–ü—Ä–æ–≤–µ—Å—Ç–∏", self._post),
            ("–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏ –∑–∞–∫—Ä—ã—Ç—å", self._post_close)
        ]:
            b = QPushButton(txt); b.clicked.connect(slot)
            btns.addWidget(b)
        v.addLayout(btns)

        self.tabs.addTab(self.frm_new, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑")

        self.tbl_orders = QTableWidget(0, 3)
        self.tbl_orders.setHorizontalHeaderLabels(["‚Ññ", "–î–∞—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"])
        self.tbl_orders.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tbl_orders.cellDoubleClicked.connect(self._show_order)

        tab_orders = QWidget()
        layout_orders = QVBoxLayout(tab_orders)
        btn_reload = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
        btn_reload.clicked.connect(self._load_orders)
        layout_orders.addWidget(btn_reload)
        layout_orders.addWidget(self.tbl_orders)
        self.tabs.addTab(tab_orders, "–ó–∞–∫–∞–∑—ã")

    def _add_row(self):
        r = self.tbl.rowCount()
        self.tbl.insertRow(r)

        art = QComboBox(); art.setEditable(True); art.addItems(self.articles.keys())
        name = QTableWidgetItem("")
        variant = QComboBox()
        size = QDoubleSpinBox(); size.setDecimals(1); size.setRange(0.5, 50.0)
        qty = QSpinBox(); qty.setRange(1, 999); qty.setValue(1)
        wgt = QDoubleSpinBox(); wgt.setDecimals(3); wgt.setMaximum(9999)

        widgets = [art, name, variant, size, qty, wgt]
        for c, w in enumerate(widgets):
            if isinstance(w, (QComboBox, QSpinBox, QDoubleSpinBox)):
                self.tbl.setCellWidget(r, c, w)
            else:
                self.tbl.setItem(r, c, w)

        def fill():
            selected_art = art.currentText().strip()
            card = self.articles.get(selected_art, {})
            name.setText(card.get("name", ""))
            if card.get("size"):
                size.setValue(float(card["size"]))
            wgt.setValue(round(card.get("w", 0) * qty.value(), 3))

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            variant.clear()
            if selected_art:
                filtered = bridge.get_variants_by_article(selected_art)
                variant.addItems(filtered or ["‚Äî"])
            else:
                variant.addItem("‚Äî")

        art.currentTextChanged.connect(fill)
        qty.valueChanged.connect(fill)
        fill()

    def _remove_row(self):
        if self.tbl.rowCount() > 0:
            self.tbl.removeRow(self.tbl.rowCount() - 1)

    def _new_order(self):
        self.ed_num.setText(bridge.get_next_order_number())
        self.tbl.setRowCount(0)
        self._add_row()
        self.tabs.setCurrentIndex(0)

    def _post(self):
        fields = {
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": self.c_org.currentText(),
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": self.c_contr.currentText(),
            "–î–æ–≥–æ–≤–æ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": self.c_ctr.currentText(),
            "–°–∫–ª–∞–¥": self.c_wh.currentText(),
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": f"–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ GUI {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            "–î–∞—Ç–∞": pywintypes.Time(self.d_date.date().toPyDate()),
            "–í–∏–¥–°—Ç–∞—Ç—É—Å–ü—Ä–æ–¥—É–∫—Ü–∏–∏": self.status_combo.currentText()
        }

        items = []
        for row in range(self.tbl.rowCount()):
            art = self.tbl.cellWidget(row, 0).currentText()
            card = self.articles.get(art, {})
            variant = self.tbl.cellWidget(row, 2).currentText()
            size = self.tbl.cellWidget(row, 3).value()
            qty = self.tbl.cellWidget(row, 4).value()
            wgt = self.tbl.cellWidget(row, 5).value()

            items.append({
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": card.get("name", ""),
                "–ê—Ä—Ç–∏–∫—É–ª–ì–ü": card.get("name", ""),
                "–í–∞—Ä–∏–∞–Ω—Ç–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è": variant,
                "–†–∞–∑–º–µ—Ä": size,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": qty,
                "–í–µ—Å": wgt,
                "–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è": "—à—Ç"
            })

        number = bridge.create_order(fields, items)
        self.ed_num.setText(number)
        self._load_orders()
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ü—Ä–æ–≤–µ–¥–µ–Ω–æ: –∑–∞–∫–∞–∑ ‚Ññ{number}")

    def _post_close(self):
        self._post()
        self.tabs.setCurrentIndex(1)

    def _load_orders(self):
        self.tbl_orders.setRowCount(0)
        self._orders = bridge.list_orders()
        for o in self._orders:
            r = self.tbl_orders.rowCount()
            self.tbl_orders.insertRow(r)
            for c, val in enumerate([o["num"], o["date"], o["contragent"]]):
                self.tbl_orders.setItem(r, c, QTableWidgetItem(str(val)))

    def _show_order(self, row, col):
        if row >= len(self._orders): return
        o = self._orders[row]
        dlg = QMessageBox()
        dlg.setWindowTitle(f"–ó–∞–∫–∞–∑ ‚Ññ{o['num']} –æ—Ç {o['date']}")
        rows = o.get("rows", [])
        txt = "\n".join([
            f"{r['nomenclature']} [{r['variant']}] {r['qty']}—à—Ç {r['w']}–≥"
            for r in rows
        ]) or "(–Ω–µ—Ç —Å—Ç—Ä–æ–∫)"
        dlg.setText(txt)
        dlg.exec_()
